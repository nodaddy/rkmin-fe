{"version":3,"sources":["logo.svg","apiBaseInfo.js","Forms/incomingEntryForm/index.js","Forms/grindingEntryForm/index.js","Forms/powderDispatchEntryForm/index.js","Forms/index.js","Reports/index.js","App.js","reportWebVitals.js","index.js"],"names":["API_BASE","IncomingEntryForm","props","useState","componentSize","submitFormLoader","setSubmitFormLoader","deleteByIdLoader","setDeleteByIdLoader","date","setDate","mineralName","setMineralName","mineralId","setMineralId","supplier","setSupplier","truckNumber","setTruckNumber","quantity","setQuantity","remarks","setRemarks","rockType","setRockType","showAffirmation","setShowAffermation","dataAffirmationFromDB","setDataAffirmationFromDB","mineralForComponent","setMineralForComponent","dateForComponent","setDateForComponent","style","height","overflowY","paddingBottom","paddingTop","xs","span","md","labelCol","wrapperCol","layout","initialValues","size","onValuesChange","onFinish","values","console","log","Item","label","textAlign","value","onChange","e","_d","moment","dateArray","toString","split","customDateString","defaultValue","minerals","map","mineral","_id","Option","suppliers","rockTypes","failureToast","target","placeholder","type","onClick","axios","post","then","res","data","message","get","content","catch","err","LoadingOutlined","title","visible","footer","successToast","onCancel","Object","keys","key","GrindingEntryForm","PdfMakeWrapper","setFonts","pdfFonts","productionUnit","setProductionUnit","shift","setShift","gradeName","setGradeName","composition","setComposition","partRatio","setPartRatio","unit","powderGrades","grade","marginTop","compositionPart","inputPartRatio","push","marginLeft","borderRadius","padding","color","backgroundColor","length","border","partRatioSum","part","JSON","stringify","PowderDispatchingEntryForm","TabPane","Tabs","Forms","setMinerals","apploading","setAppLoading","useEffect","alert","topTabs","FormOutlined","fontSize","defaultActiveKey","tabPosition","tab","Reports","dataLoading","setDataLoading","mineralStock","setMineralStock","infoType","setInfoType","showMineralInfo","setShowMineralInfo","window","location","reload","to","RollbackOutlined","align","paddingLeft","marginRight","j","mineralBalance","typeBalance","measuringUnit","calMineralInfo","href","DownloadOutlined","gradeBalance","toast","success","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","error","App","className","exact","path","margin","onMouseOver","cursor","LineChartOutlined","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.59d2d127.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","export const API_BASE = \"https://rkmin.herokuapp.com\";\n","import React, { useState } from 'react';\r\nimport moment from 'moment';\r\nimport {\r\n    Row,\r\n    Col,\r\n    Form,\r\n    Input,\r\n    Button,\r\n    Radio,\r\n    Select,\r\n    Cascader,\r\n    DatePicker,\r\n    InputNumber,\r\n    TreeSelect,\r\n    Switch,\r\n    Modal\r\n  } from 'antd';\r\nimport TextArea from 'antd/lib/input/TextArea';\r\nimport axios from 'axios';\r\nimport { API_BASE } from '../../apiBaseInfo';\r\nimport { successToast, failureToast } from '../../App';\r\nimport {LoadingOutlined} from '@ant-design/icons';\r\n\r\n\r\nfunction IncomingEntryForm(props) { \r\n        const [componentSize, setComponentSize] = useState('small');\r\n\r\n        const [submitFormLoader, setSubmitFormLoader] = useState(false);\r\n        const [deleteByIdLoader, setDeleteByIdLoader] = useState(false);\r\n\r\n        //form payload\r\n        const [date, setDate] = useState(null);\r\n        const [mineralName, setMineralName] = useState(null);\r\n        const [mineralId, setMineralId] = useState(null);\r\n        const [supplier, setSupplier] = useState(null);\r\n        const [truckNumber, setTruckNumber] = useState(null);\r\n        const [quantity, setQuantity] = useState(null);\r\n        const [remarks, setRemarks] = useState(null);\r\n        const [rockType, setRockType] = useState(null);\r\n\r\n        // affirmation after saving into the DB\r\n        const [showAffirmation, setShowAffermation] = useState(false);\r\n        const [dataAffirmationFromDB, setDataAffirmationFromDB] = useState(null);\r\n\r\n        const [mineralForComponent, setMineralForComponent] = useState(null);\r\n        const [dateForComponent, setDateForComponent] = useState(null);\r\n\r\n        const sendEntry = () => { \r\n            if(date == null || mineralId == null || mineralName == null || supplier == null || truckNumber  == null || quantity == null || rockType == null){\r\n                failureToast(\"All fields are required\");\r\n            } else {\r\n          setSubmitFormLoader(true);\r\n            axios.post(API_BASE + \"/api/incomingEntryModel\",\r\n            {\r\n                    \"incomingDate\": date,  \r\n                    \"mineralId\": mineralId,  \r\n                    \"mineralName\":mineralName,    \r\n                    \"supplier\": supplier,  \r\n                    \"rockType\": rockType,  \r\n                    \"typeQuantity\": quantity,\r\n                    \"truckNumber\": truckNumber,\r\n                    \"remarks\": remarks\r\n            }\r\n            ).then(res => {\r\n                console.log(res.data.message);\r\n                if(res.data.message == 'success'){\r\n                axios.get(API_BASE + '/api/incomingEntryModel/getLastInserted').then((res) => {\r\n                    setDataAffirmationFromDB(res.data.content);\r\n                }).then(()=>{\r\n                    setShowAffermation(true);\r\n                    setSubmitFormLoader(false);\r\n\r\n                })\r\n              }\r\n            }).catch(err => {\r\n              setSubmitFormLoader(false);\r\n              failureToast('Something went wrong while submitting the form');\r\n            })\r\n        }\r\n        }\r\n\r\n    return ( \r\n        <>\r\n        <Row \r\n        style={{height: '75vh', overflowY: 'scroll', paddingBottom:'20px', paddingTop:'20px'}}\r\n        \r\n        >\r\n            <Col xs={{span:24}} md={{span:20}}>\r\n            <Form\r\n                labelCol={{ span: 8 }}\r\n                wrapperCol={{ span: 12 }}\r\n                layout=\"horizontal\"\r\n                initialValues={{ size: componentSize }}\r\n                onValuesChange={()=>{}}\r\n                size={componentSize}\r\n                onFinish={(values)=>{\r\n                    console.log(values);\r\n                }}\r\n      > \r\n        <Form.Item label=\"Incoming Date\" style={{textAlign:'left'}}>\r\n          <DatePicker value={dateForComponent} onChange={(e) => {\r\n              if(e){\r\n                console.log(e._d);\r\n                setDateForComponent(moment(e._d));\r\n                var date = e._d.toString();\r\n                var dateArray = date.split(\" \");\r\n                // customDateString Day/Month/DateOFMonth/Year/\r\n                var customDateString = `${dateArray[0]}/${dateArray[1]}/${dateArray[2]}/${dateArray[3]}`;\r\n                setDate(customDateString);\r\n              }\r\n          }} />\r\n        </Form.Item>\r\n        <Form.Item label=\"Mineral\">\r\n          <Select defaultValue={\"Select\"}\r\n          value={mineralName}\r\n          onChange={(value) => {\r\n            console.log(value);\r\n            setMineralName(value);\r\n            props.minerals.map((mineral) => {\r\n                if(mineral.mineralName == value){\r\n                    setMineralId(mineral._id);\r\n                    setMineralForComponent(mineral);\r\n                }\r\n            })\r\n          }}>\r\n              {\r\n                  props.minerals.map((mineral) => {\r\n                    return <Select.Option value={mineral.mineralName}>\r\n                            {mineral.mineralName}\r\n                        </Select.Option>\r\n                  })\r\n              } \r\n          </Select>\r\n        </Form.Item>\r\n        <Form.Item label=\"Supplier\">\r\n        <Select\r\n        value={supplier}\r\n        onChange={(value) => {\r\n            setSupplier(value);\r\n        }}\r\n        >\r\n              { \r\n                mineralForComponent != null ? mineralForComponent.suppliers.map((supplier) => {\r\n                return <Select.Option value={supplier}>{supplier}</Select.Option>\r\n                }) \r\n                :\r\n                \"\"\r\n              } \r\n          </Select>\r\n        </Form.Item>\r\n\r\n        <Form.Item label=\"Rock type\">\r\n        <Select\r\n        value={rockType}\r\n        onChange={(value) => {\r\n            setRockType(value);\r\n        }}\r\n        >\r\n              { \r\n                        mineralForComponent != null ? mineralForComponent.rockTypes.map((rockType) => {\r\n                            if(rockType.supplier == supplier){\r\n                            return <Select.Option value={rockType.rockType}>{rockType.rockType}</Select.Option>\r\n                            }\r\n                          })\r\n                          :\r\n                          \"\"\r\n              } \r\n          </Select>\r\n        </Form.Item> \r\n        <Form.Item label=\"Quantity\" style={{textAlign:\"left\"}}>\r\n          <InputNumber value={quantity} onChange={(value) => {\r\n              if(value > 0){ setQuantity(value) }\r\n              else {  \r\n                failureToast(\"'Quantity' must be a positive number\");\r\n            }\r\n          }} />\r\n        </Form.Item>\r\n\r\n        <Form.Item label=\"Truck number\" style={{textAlign:\"left\"}}>\r\n          <Input value={truckNumber} onChange={(e) => {\r\n              setTruckNumber(e.target.value); \r\n          }}/>\r\n        </Form.Item>\r\n\r\n        <Form.Item  label=\"Remarks\" style={{textAlign:\"left\"}}>\r\n          <TextArea placeholder=\"type here ...\" value={remarks} onChange={(e) => {\r\n              setRemarks(e.target.value);\r\n          }} />\r\n        </Form.Item>\r\n         \r\n      </Form>\r\n      </Col>\r\n      <Col xs={{span:24}} md={{span:24}}>\r\n        <Button style={{}} type=\"primary\" onClick={sendEntry}>{submitFormLoader ? <LoadingOutlined/> : \"Save\"}</Button>  \r\n          <Button style={{}} onClick={()=>{\r\n               setShowAffermation(false); \r\n\r\n               setDateForComponent(null);\r\n               setRemarks(null);\r\n               setQuantity(null);\r\n               setTruckNumber(null);\r\n               setRockType(null);\r\n               setMineralName(null);\r\n               setMineralId(null);\r\n               setSupplier(null);\r\n          }} type=\"link\">Reset</Button>\r\n      </Col>\r\n        </Row>\r\n\r\n        <Modal title=\"Confirmation\" visible={showAffirmation} \r\n        footer={[\r\n          <Button key=\"back\" type=\"ghost\" onClick={() => {\r\n            setDeleteByIdLoader(true);\r\n            console.log(dataAffirmationFromDB);\r\n              //delete the record from database and resubmit\r\n              axios.post(API_BASE + \"/api/incomingEntryModel/deleteById/\" + dataAffirmationFromDB[0]._id, dataAffirmationFromDB[0]).then((res)=>{\r\n                  // failureToast(res.data.message + \"deleted\");\r\n                  // pdfEntryErrorReport.add(JSON.stringify(dataAffirmationFromDB));\r\n                  // pdfEntryErrorReport.create().download();\r\n              }).then(()=>{\r\n                setShowAffermation(false);\r\n                setDeleteByIdLoader(false);\r\n              }).catch(err => {\r\n                setDeleteByIdLoader(false);\r\n                failureToast(\"Error! Not deleted\")\r\n              })\r\n          }}>{deleteByIdLoader ? <LoadingOutlined/> : \"Edit\"}\r\n          </Button>,\r\n            <Button key=\"submit\" type=\"primary\" onClick={()=>{\r\n                successToast(\"Entry Saved\");\r\n                setShowAffermation(false);\r\n                \r\n                setDateForComponent(null);\r\n                setRemarks(null);\r\n                setQuantity(null);\r\n                setTruckNumber(null);\r\n                setRockType(null);\r\n                setMineralName(null);\r\n                setMineralId(null);\r\n                setSupplier(null);\r\n                }}>\r\n              Submit\r\n            </Button>,\r\n            // <Button\r\n            //   key=\"link\"\r\n            //   href=\"https://google.com\"\r\n            //   type=\"primary\"\r\n            //   loading={loading}\r\n            //   onClick={this.handleOk}\r\n            // >\r\n            //   Search on Google\r\n            // </Button>,\r\n          ]}  onCancel={() => {}}> \r\n            Please re-examin the submitted document\r\n            <br/>\r\n            <sub> Click on \"Submit\" to save or click on \"Edit\" to make changes  </sub>\r\n            <br/>\r\n            <hr/>\r\n            <ul>\r\n            {\r\n            dataAffirmationFromDB? Object.keys(dataAffirmationFromDB[0]).map((key) => {\r\n                if(key != \"_id\" && key != \"timeStamp\" && key != \"__v\") {\r\n                     return <li>{key} : {dataAffirmationFromDB[0][key]}</li>\r\n                } else {\r\n                    return \"\";\r\n                }\r\n            })\r\n            :\r\n            \"\"\r\n            }\r\n            </ul>\r\n        </Modal>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default IncomingEntryForm;","import React, { useState } from 'react';\r\nimport moment from 'moment';\r\nimport { PdfMakeWrapper } from 'pdfmake-wrapper'; \r\nimport * as pdfFonts from \"pdfmake/build/vfs_fonts\";\r\n\r\nimport {\r\n    Row,\r\n    Col,\r\n    Form,\r\n    Input,\r\n    Button,\r\n    Radio,\r\n    Select,\r\n    Cascader,\r\n    DatePicker,\r\n    InputNumber, \r\n    TreeSelect,\r\n    Switch,\r\n    Modal\r\n  } from 'antd';\r\nimport TextArea from 'antd/lib/input/TextArea';\r\nimport axios from 'axios';\r\nimport { API_BASE } from '../../apiBaseInfo';\r\nimport { successToast, failureToast } from '../../App';\r\nimport {LoadingOutlined} from '@ant-design/icons';\r\n\r\nfunction GrindingEntryForm(props) { \r\n        PdfMakeWrapper.setFonts(pdfFonts);\r\n        const pdfEntryErrorReport = new PdfMakeWrapper();\r\n\r\n        const [componentSize, setComponentSize] = useState('small');\r\n\r\n        const [submitFormLoader, setSubmitFormLoader] = useState(false);\r\n        const [deleteByIdLoader, setDeleteByIdLoader] = useState(false);\r\n\r\n        // composition: [{inputPartRatio: Number, supplier: String, rockType: String}],\r\n\r\n        const productionUnits = ['Unit 1', 'Unit 2']\r\n        const shifts = ['Morning', 'Evening', 'Night']\r\n\r\n        //form payload\r\n        const [date, setDate] = useState(null);\r\n        const [productionUnit, setProductionUnit] = useState(null);\r\n        const [mineralId, setMineralId] = useState(null);\r\n        const [shift, setShift] = useState(null);\r\n        const [mineralName, setMineralName] = useState(null);\r\n        const [quantity, setQuantity] = useState(null);\r\n        const [gradeName, setGradeName] = useState(null);\r\n        const [composition, setComposition] = useState([]);\r\n\r\n        //for composition\r\n        const [rockType, setRockType] = useState(null);\r\n        const [supplier, setSupplier] = useState(null);\r\n        const [partRatio, setPartRatio] = useState(null);\r\n\r\n        // affirmation after saving into the DB\r\n        const [showAffirmation, setShowAffermation] = useState(false);\r\n        const [dataAffirmationFromDB, setDataAffirmationFromDB] = useState(null);\r\n\r\n        const [mineralForComponent, setMineralForComponent] = useState(null);\r\n        const [dateForComponent, setDateForComponent] = useState(null);\r\n\r\n        const sendEntry = () => { \r\n          console.log(composition);\r\n          var partRatioSum = 0;\r\n          if(composition.length != 0){ composition.map((part) => {\r\n            partRatioSum += part.inputPartRatio;\r\n          })}\r\n            if(date == null || mineralId == null || mineralName == null || quantity == null || composition == [] || gradeName == null || productionUnit == null || shift == null){\r\n                failureToast(\"All fields are required\");\r\n            } else if(partRatioSum < 1 || partRatioSum > 1){\r\n              failureToast(\"Sum of constituent partRatios must be 1\");\r\n            }else {\r\n          setSubmitFormLoader(true);\r\n            axios.post(API_BASE + \"/api/grindingEntryModel\",\r\n            {\r\n                    \"grindingDate\": date,\r\n                    \"productionUnitUsed\": productionUnit, \r\n                    \"shift\": shift,  \r\n                    \"mineralId\": mineralId,\r\n                    \"mineralName\": mineralName,\r\n                    \"gradeName\": gradeName,  \r\n                    \"quantityProduced\": quantity, \r\n                    \"composition\": composition\r\n            }\r\n            ).then(res => {\r\n                console.log(res.data.message);\r\n                if(res.data.message == \"success\"){\r\n                axios.get(API_BASE + '/api/grindingEntryModel/getLastInserted').then((res) => {\r\n                    setDataAffirmationFromDB(res.data.content);\r\n                }).then(()=>{\r\n                    setShowAffermation(true);\r\n                    setSubmitFormLoader(false);\r\n                })\r\n              }\r\n            }).catch((err) => {\r\n              setSubmitFormLoader(false);\r\n              failureToast('Something went wrong while submitting the form');\r\n            })\r\n        }\r\n        }\r\n\r\n    return (\r\n        <>\r\n        <Row \r\n        style={{height: '75vh', overflowY: 'scroll', paddingBottom:'20px', paddingTop:'20px'}}\r\n        >\r\n            <Col xs={{span:24}} md={{span:20}}>\r\n            <Form\r\n                labelCol={{ span: 8 }}\r\n                wrapperCol={{ span: 12 }}\r\n                layout=\"horizontal\"\r\n                initialValues={{ size: componentSize }}\r\n                onValuesChange={()=>{}}\r\n                size={componentSize}\r\n                onFinish={(values)=>{\r\n                    console.log(values);\r\n                }}\r\n      > \r\n        <Form.Item label=\"Grinding Date\" style={{textAlign:'left'}}>\r\n          <DatePicker value={dateForComponent} onChange={(e) => {\r\n              if(e){\r\n                console.log(e._d);\r\n                setDateForComponent(moment(e._d));\r\n                var date = e._d.toString();\r\n                var dateArray = date.split(\" \");\r\n                // customDateString Day/Month/DateOFMonth/Year/\r\n                var customDateString = `${dateArray[0]}/${dateArray[1]}/${dateArray[2]}/${dateArray[3]}`;\r\n                setDate(customDateString);\r\n              }\r\n          }} />\r\n        </Form.Item>\r\n        <Form.Item label=\"Production Unit\">\r\n          <Select defaultValue={\"Select\"}\r\n          value={productionUnit}\r\n          onChange={(value) => {\r\n            console.log(value);\r\n            setProductionUnit(value); \r\n          }}>\r\n              {\r\n                  productionUnits.map((unit) => {\r\n                    return <Select.Option value={unit}>\r\n                            {unit}\r\n                        </Select.Option>\r\n                  })\r\n              } \r\n          </Select>\r\n        </Form.Item>\r\n        <Form.Item label=\"Shift\">\r\n          <Select defaultValue={\"Select\"}\r\n          value={shift}\r\n          onChange={(value) => {\r\n            console.log(value);\r\n            setShift(value); \r\n          }}>\r\n              {\r\n                  shifts.map((shift) => {\r\n                    return <Select.Option value={shift}>\r\n                            {shift}\r\n                        </Select.Option>\r\n                  })\r\n              } \r\n          </Select>\r\n        </Form.Item>\r\n        <Form.Item label=\"Mineral\">\r\n          <Select defaultValue={\"Select\"}\r\n          value={mineralName}\r\n          onChange={(value) => {\r\n            console.log(value);\r\n            setMineralName(value);\r\n            props.minerals.map((mineral) => {\r\n                if(mineral.mineralName == value){\r\n                    setMineralId(mineral._id);\r\n                    setMineralForComponent(mineral);\r\n                }\r\n            })\r\n          }}>\r\n              {\r\n                  props.minerals.map((mineral) => {\r\n                    return <Select.Option value={mineral.mineralName}>\r\n                            {mineral.mineralName}\r\n                        </Select.Option>\r\n                  })\r\n              } \r\n          </Select>\r\n        </Form.Item>\r\n        <Form.Item label=\"Grade\">\r\n        <Select\r\n        value={gradeName}\r\n        onChange={(value) => {\r\n            setGradeName(value);\r\n        }}\r\n        >\r\n              { \r\n                mineralForComponent != null ? mineralForComponent.powderGrades.map((grade) => {\r\n                return <Select.Option value={grade.gradeName}>{grade.gradeName}</Select.Option>\r\n                }) \r\n                :\r\n                \"\"\r\n              } \r\n          </Select>\r\n        </Form.Item>\r\n        <Form.Item label=\"Quantity\" style={{textAlign:\"left\"}}>\r\n          <InputNumber value={quantity} onChange={(value) => {\r\n              if(value > 0){ setQuantity(value) }\r\n              else {  \r\n                failureToast(\"'Quantity' must be a positive number\");\r\n            }\r\n          }} />\r\n        </Form.Item>\r\n        <Form.Item label=\"Composition\" style={{textAlign:\"left\"}}>\r\n          <sub>Part Ratio</sub><br/>\r\n          <InputNumber value={partRatio} onChange={(value) => {\r\n              if(value > 0){ setPartRatio(value) } \r\n          }} /><br/>\r\n          <sub>Supplier</sub>\r\n          <Select \r\n        value={supplier}\r\n        onChange={(value) => {\r\n            setSupplier(value);\r\n        }}\r\n        >\r\n              { \r\n                mineralForComponent != null ? mineralForComponent.suppliers.map((supplier) => {\r\n                return <Select.Option value={supplier}>{supplier}</Select.Option>\r\n                }) \r\n                :\r\n                \"\"\r\n              } \r\n          </Select>\r\n          <sub>Rock type</sub>\r\n\r\n          <Select\r\n        value={rockType}\r\n        onChange={(value) => {\r\n            setRockType(value);\r\n        }}\r\n        >\r\n              { \r\n                        mineralForComponent != null ? mineralForComponent.rockTypes.map((rockType) => {\r\n                            if(rockType.supplier == supplier){\r\n                            return <Select.Option value={rockType.rockType}>{rockType.rockType}</Select.Option>\r\n                            }\r\n                          })\r\n                          :\r\n                          \"\"\r\n              } \r\n          </Select>\r\n          <Button\r\n          style={{marginTop:'5px'}}\r\n          onClick={() => {\r\n            if(partRatio == null || supplier == null || rockType == null){\r\n              failureToast(\"Empty fields in 'Composition' are not allowed\");\r\n            } else {\r\n              const compositionPart = {inputPartRatio: partRatio, supplier: supplier, rockType: rockType};\r\n              composition.push(compositionPart);\r\n              setPartRatio(null);\r\n              setSupplier(null);\r\n              setRockType(null);\r\n            }\r\n          }}\r\n          >Add</Button>\r\n          <span style={{ marginLeft: '20px'}}>\r\n          <span style={{borderRadius:'2px', padding: '3.5px', marginLeft:'15px', color: 'yellow', backgroundColor: '#1890ff'}}>\r\n              <span style={{color:'yellow'}}>{composition.length}</span> constituents\r\n          </span>\r\n          <Button\r\n          style={{marginTop:'2px', marginLeft: '3px', border: '1px solid #1890ff'}}\r\n          onClick={() => {\r\n            setComposition([]);\r\n          }}\r\n          >Reset constituents</Button>\r\n          </span>\r\n        </Form.Item>\r\n \r\n         \r\n      </Form>\r\n      </Col>\r\n      <Col xs={{span:24}} md={{span:24}}>\r\n          <Button style={{}} type=\"primary\" onClick={sendEntry}>{ submitFormLoader? <LoadingOutlined/>:\"Save\"}</Button>  \r\n          <Button style={{}} onClick={()=>{\r\n               setShowAffermation(false); \r\n\r\n               setDateForComponent(null);\r\n               setShift(null);\r\n               setQuantity(null);\r\n               setComposition([]); \r\n               setMineralName(null);\r\n               setMineralId(null); \r\n               setGradeName(null);\r\n               setProductionUnit(null);\r\n          }} type=\"link\">Reset</Button>\r\n      </Col>\r\n        </Row>\r\n\r\n        <Modal title=\"Confirmation\" visible={showAffirmation} \r\n        footer={[\r\n            <Button key=\"back\" type=\"ghost\" onClick={() => {\r\n              setDeleteByIdLoader(true);\r\n              console.log(dataAffirmationFromDB);\r\n                //delete the record from database and resubmit\r\n                axios.post(API_BASE + \"/api/grindingEntryModel/deleteById/\" + dataAffirmationFromDB[0]._id, dataAffirmationFromDB[0]).then((res)=>{\r\n                    // failureToast(res.data.message + \"deleted\");\r\n                    // pdfEntryErrorReport.add(JSON.stringify(dataAffirmationFromDB));\r\n                    // pdfEntryErrorReport.create().download();\r\n                }).then(()=>{\r\n                  setShowAffermation(false);\r\n                  setDeleteByIdLoader(false);\r\n                }).catch(err => {\r\n                  failureToast(\"Error! Not deleted\");\r\n                  setDeleteByIdLoader(false);\r\n                })\r\n            }}>{deleteByIdLoader ? <LoadingOutlined/> : \"Edit\" }\r\n            </Button>,\r\n            <Button key=\"submit\" type=\"primary\" onClick={()=>{\r\n                successToast(\"Entry Saved\");\r\n                setShowAffermation(false);\r\n                \r\n                setDateForComponent(null);\r\n                setShift(null);\r\n                setQuantity(null);\r\n                setComposition([]); \r\n                setMineralName(null);\r\n                setMineralId(null); \r\n                setGradeName(null);\r\n                setProductionUnit(null);\r\n                }}>\r\n              Done\r\n            </Button>,\r\n            // <Button\r\n            //   key=\"link\"\r\n            //   href=\"https://google.com\"\r\n            //   type=\"primary\"\r\n            //   loading={loading}\r\n            //   onClick={this.handleOk}\r\n            // >\r\n            //   Search on Google\r\n            // </Button>,\r\n          ]}  onCancel={() => {}}> \r\n            Please re-examin the submitted document\r\n            <br/>\r\n            <sub> Click on \"Submit\" to save or click on \"Edit\" to make changes  </sub>\r\n            <br/>\r\n            <hr/>\r\n            <ul>\r\n            {\r\n            dataAffirmationFromDB? Object.keys(dataAffirmationFromDB[0]).map((key) => {\r\n                if(key != \"_id\" && key != \"timeStamp\" && key != \"__v\") {\r\n                     return <li>{key} : {JSON.stringify(dataAffirmationFromDB[0][key])}</li>\r\n                } else {\r\n                    return \"\";\r\n                }\r\n            })\r\n            :\r\n            \"\"\r\n            }\r\n            </ul>\r\n        </Modal>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default GrindingEntryForm;","import React, { useState } from 'react';\r\nimport moment from 'moment';\r\nimport {\r\n    Row,\r\n    Col,\r\n    Form,\r\n    Input,\r\n    Button,\r\n    Radio,\r\n    Select,\r\n    Cascader,\r\n    DatePicker,\r\n    InputNumber,\r\n    TreeSelect,\r\n    Switch,\r\n    Modal\r\n  } from 'antd';\r\nimport TextArea from 'antd/lib/input/TextArea';\r\nimport axios from 'axios';\r\nimport { API_BASE } from '../../apiBaseInfo';\r\nimport { successToast, failureToast } from '../../App';\r\nimport {LoadingOutlined} from '@ant-design/icons';\r\n\r\nfunction PowderDispatchingEntryForm(props) { \r\n        const [componentSize, setComponentSize] = useState('small');\r\n       \r\n        // composition: [{inputPartRatio: Number, supplier: String, rockType: String}],\r\n\r\n        const productionUnits = ['Unit 1', 'Unit 2']\r\n        const shifts = ['Morning', 'Evening', 'Night']\r\n\r\n        const [submitFormLoader, setSubmitFormLoader] = useState(false);\r\n        const [deleteByIdLoader, setDeleteByIdLoader] = useState(false);\r\n\r\n        //form payload\r\n        const [date, setDate] = useState(null); \r\n        const [mineralId, setMineralId] = useState(null); \r\n        const [mineralName, setMineralName] = useState(null);\r\n        const [quantity, setQuantity] = useState(null);\r\n        const [gradeName, setGradeName] = useState(null);\r\n        const [remarks, setRemarks] = useState(null);\r\n \r\n\r\n        // affirmation after saving into the DB\r\n        const [showAffirmation, setShowAffermation] = useState(false);\r\n        const [dataAffirmationFromDB, setDataAffirmationFromDB] = useState(null);\r\n\r\n        const [mineralForComponent, setMineralForComponent] = useState(null);\r\n        const [dateForComponent, setDateForComponent] = useState(null);\r\n\r\n        const sendEntry = () => { \r\n            if(date == null || mineralId == null || mineralName == null || quantity == null || gradeName == null){\r\n                failureToast(\"All fields are required\");\r\n            } else {\r\n          setSubmitFormLoader(true);\r\n            axios.post(API_BASE + \"/api/powderDispatchingEntryModel\",\r\n            {\r\n                \"dispatchingDate\": date,\r\n                \"mineralId\": mineralId,   \r\n                \"mineralName\": mineralName,\r\n                \"gradeName\": gradeName,\r\n                \"quantityDispatched\": quantity,\r\n                \"remarks\": remarks\r\n            }\r\n            ).then(res => {\r\n                console.log(res.data.message);\r\n                if(res.data.message == 'success'){\r\n                axios.get(API_BASE + '/api/powderDispatchingEntryModel/getLastInserted').then((res) => {\r\n                    setDataAffirmationFromDB(res.data.content);\r\n                }).then(()=>{\r\n                    setShowAffermation(true);\r\n                    setSubmitFormLoader(false);\r\n\r\n                })\r\n              }\r\n            }).catch(err => {\r\n              setSubmitFormLoader(false);\r\n              failureToast('Something went wrong while submitting the form');\r\n            })\r\n        }\r\n        }\r\n\r\n    return (\r\n        <>\r\n        <Row \r\n        style={{height: '75vh', overflowY: 'scroll', paddingBottom:'20px', paddingTop:'20px'}}\r\n        \r\n        >\r\n            <Col xs={{span:24}} md={{span:20}}>\r\n            <Form\r\n                labelCol={{ span: 8 }}\r\n                wrapperCol={{ span: 12 }}\r\n                layout=\"horizontal\"\r\n                initialValues={{ size: componentSize }}\r\n                onValuesChange={()=>{}}\r\n                size={componentSize}\r\n                onFinish={(values)=>{\r\n                    console.log(values);\r\n                }}\r\n      > \r\n        <Form.Item label=\"Grinding Date\" style={{textAlign:'left'}}>\r\n          <DatePicker value={dateForComponent} onChange={(e) => {\r\n              if(e){\r\n                console.log(e._d);\r\n                setDateForComponent(moment(e._d));\r\n                var date = e._d.toString();\r\n                var dateArray = date.split(\" \");\r\n                // customDateString Day/Month/DateOFMonth/Year/\r\n                var customDateString = `${dateArray[0]}/${dateArray[1]}/${dateArray[2]}/${dateArray[3]}`;\r\n                setDate(customDateString);\r\n              }\r\n          }} />\r\n        </Form.Item> \r\n        <Form.Item label=\"Mineral\">\r\n          <Select defaultValue={\"Select\"}\r\n          value={mineralName}\r\n          onChange={(value) => {\r\n            console.log(value);\r\n            setMineralName(value);\r\n            props.minerals.map((mineral) => {\r\n                if(mineral.mineralName == value){\r\n                    setMineralId(mineral._id);\r\n                    setMineralForComponent(mineral);\r\n                }\r\n            })\r\n          }}>\r\n              {\r\n                  props.minerals.map((mineral) => {\r\n                    return <Select.Option value={mineral.mineralName}>\r\n                            {mineral.mineralName}\r\n                        </Select.Option>\r\n                  })\r\n              } \r\n          </Select>\r\n        </Form.Item>\r\n        <Form.Item label=\"Grade\">\r\n        <Select\r\n        value={gradeName}\r\n        onChange={(value) => {\r\n            setGradeName(value);\r\n        }}\r\n        >\r\n              { \r\n                mineralForComponent != null ? mineralForComponent.powderGrades.map((grade) => {\r\n                return <Select.Option value={grade.gradeName}>{grade.gradeName}</Select.Option>\r\n                }) \r\n                :\r\n                \"\"\r\n              } \r\n          </Select>\r\n        </Form.Item>\r\n        <Form.Item label=\"Quantity Dispatched\" style={{textAlign:\"left\"}}>\r\n          <InputNumber value={quantity} onChange={(value) => {\r\n              if(value > 0){ setQuantity(value) }\r\n              else {  \r\n                failureToast(\"'Quantity' must be a positive number\");\r\n            }\r\n          }} />\r\n        </Form.Item> \r\n        \r\n        <Form.Item  label=\"Remarks\" style={{textAlign:\"left\"}}>\r\n          <TextArea placeholder=\"type here ...\" value={remarks} onChange={(e) => {\r\n              setRemarks(e.target.value);\r\n          }} />\r\n        </Form.Item>\r\n      </Form>\r\n      </Col>\r\n      <Col xs={{span:24}} md={{span:24}}>\r\n          <Button style={{}} type=\"primary\" onClick={sendEntry}>{submitFormLoader ? <LoadingOutlined/> : \"Save\"}</Button>  \r\n          <Button style={{}} onClick={()=>{\r\n               setShowAffermation(false); \r\n\r\n               setDateForComponent(null);\r\n               setRemarks(null);\r\n               setQuantity(null); \r\n               setMineralName(null);\r\n               setMineralId(null); \r\n               setGradeName(null); \r\n          }} type=\"link\">Reset</Button>\r\n      </Col>\r\n        </Row>\r\n\r\n        <Modal title=\"Confirmation\" visible={showAffirmation} \r\n        footer={[\r\n          <Button key=\"back\" type=\"ghost\" onClick={() => {\r\n            setDeleteByIdLoader(true);\r\n            console.log(dataAffirmationFromDB);\r\n              //delete the record from database and resubmit\r\n              axios.post(API_BASE + \"/api/powderDispatchingEntryModel/deleteById/\" + dataAffirmationFromDB[0]._id, dataAffirmationFromDB[0]).then((res)=>{\r\n                  // failureToast(res.data.message + \"deleted\");\r\n                  // pdfEntryErrorReport.add(JSON.stringify(dataAffirmationFromDB));\r\n                  // pdfEntryErrorReport.create().download();\r\n              }).then(()=>{\r\n                setShowAffermation(false);\r\n                setDeleteByIdLoader(false);\r\n              }).catch(err => {\r\n                failureToast(\"Error! Not deleted\")\r\n                setDeleteByIdLoader(false);\r\n              })\r\n          }}>{deleteByIdLoader ? <LoadingOutlined/> : \"Edit\"}\r\n          </Button>,\r\n            <Button key=\"submit\" type=\"primary\" onClick={()=>{\r\n                successToast(\"Entry Saved\");\r\n                setShowAffermation(false);\r\n                \r\n               setDateForComponent(null);\r\n               setRemarks(null);\r\n               setQuantity(null); \r\n               setMineralName(null);\r\n               setMineralId(null); \r\n               setGradeName(null); \r\n                }}>\r\n              Submit\r\n            </Button>,\r\n            // <Button\r\n            //   key=\"link\"\r\n            //   href=\"https://google.com\"\r\n            //   type=\"primary\"\r\n            //   loading={loading}\r\n            //   onClick={this.handleOk}\r\n            // >\r\n            //   Search on Google\r\n            // </Button>,\r\n          ]}  onCancel={() => {}}> \r\n            Please re-examin the submitted document\r\n            <br/>\r\n            <sub> Click on \"Submit\" to save or click on \"Edit\" to make changes  </sub>\r\n            <br/>\r\n            <hr/>\r\n            <ul>\r\n            {\r\n            dataAffirmationFromDB? Object.keys(dataAffirmationFromDB[0]).map((key) => {\r\n                if(key != \"_id\" && key != \"timeStamp\" && key != \"__v\") {\r\n                     return <li>{key} : {JSON.stringify(dataAffirmationFromDB[0][key])}</li>\r\n                } else {\r\n                    return \"\";\r\n                }\r\n            })\r\n            :\r\n            \"\"\r\n            }\r\n            </ul>\r\n        </Modal>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default PowderDispatchingEntryForm;","import React, { useState, useEffect } from 'react';\r\nimport { Row, Col, Tabs, Button, Divider, Menu, Dropdown, Space, Spin } from 'antd';\r\nimport axios from 'axios';\r\nimport { API_BASE } from '../apiBaseInfo';\r\nimport IncomingEntryForm from './incomingEntryForm';\r\nimport GrindingEntryForm from './grindingEntryForm';\r\nimport PowderDispatchingEntryForm from './powderDispatchEntryForm';\r\n\r\nimport {LineChartOutlined, FormOutlined} from '@ant-design/icons'\r\nimport { failureToast } from '../App';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst { TabPane } = Tabs;\r\n\r\nfunction Forms(props) {\r\n\r\n    const [minerals, setMinerals] = useState([]);\r\n    const [apploading, setAppLoading] = useState(true);\r\n\r\n    useEffect(()=>{\r\n\r\n      apiCall();\r\n\r\n        function apiCall() {axios.get(API_BASE + \"/api/mineralModel\").then((res) => {\r\n            console.log(res);\r\n\r\n            // const link = document.createElement('a');\r\n            // link.href = `${res.data}`;\r\n            // document.body.appendChild(link);\r\n            // link.click();\r\n            // document.body.removeChild(link);\r\n\r\n            setMinerals(res.data.content);\r\n            setAppLoading(false);\r\n        }).catch(()=>{\r\n                alert('something went wrong in fetching the data. Please refresh!');\r\n\r\n        })}\r\n    },[])\r\n\r\n\r\n    const topTabs = [\r\n        {\r\n            title: \"🏠 Home\",\r\n            content: apploading ? <span><h2><br/></h2><Spin style={{paddingTop:'40px'}} size=\"large\" /><br/><br/>loading</span> : <h2><FormOutlined style={{fontSize:'30px', paddingTop:'30px'}}/><br/> <sub>Application is ready</sub></h2>\r\n        },\r\n        {\r\n            title: \"Incoming\",\r\n            content: apploading ? <span><Spin style={{paddingTop:'30px'}} size=\"large\" /><br/><br/>loading</span> : <IncomingEntryForm minerals={minerals} />\r\n        },\r\n        {\r\n            title: \"Grinding\",\r\n            content: apploading ? <span><Spin style={{paddingTop:'30px'}} size=\"large\" /><br/><br/>loading</span> : <GrindingEntryForm minerals={minerals} />\r\n        },\r\n        {\r\n            title: \"Dispatch\",\r\n            content: apploading ? <span><Spin size=\"large\" /><br/><br/>loading</span> : <PowderDispatchingEntryForm minerals={minerals} />\r\n        }\r\n    ]\r\n\r\n    const menu = (\r\n        <Menu>\r\n        <Menu.Item>\r\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.antgroup.com\">\r\n            1st menu item\r\n          </a>\r\n        </Menu.Item>\r\n        <Menu.Item>\r\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.aliyun.com\">\r\n            2nd menu item\r\n          </a>\r\n        </Menu.Item>\r\n        <Menu.Item>\r\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.luohanacademy.com\">\r\n            3rd menu item\r\n          </a>\r\n        </Menu.Item>\r\n      </Menu>\r\n    );\r\n\r\n    return (\r\n        <>\r\n          <Row>\r\n              <Col span={24}>\r\n                <Tabs\r\n                style={{paddingTop:''}}\r\n                defaultActiveKey=\"1\" tabPosition={\"top\"} size=\"default\" onChange={()=>{}}>\r\n                {\r\n                        topTabs.map((tab) => {\r\n                            return <TabPane tab={tab.title} key={tab.title + \"-key\"}>\r\n                            {tab.content}\r\n                            </TabPane>\r\n                        })\r\n                    }\r\n                </Tabs>\r\n            </Col>\r\n          </Row>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Forms;","import React, { useEffect, useState } from 'react';\r\nimport { API_BASE } from '../apiBaseInfo';\r\nimport { Button, Row, Col, Modal, Spin } from 'antd';\r\nimport { failureToast, successToast } from '../App';\r\nimport axios from 'axios'; \r\nimport fileDownload from 'react-file-download';\r\nimport { Link } from 'react-router-dom';\r\nimport { DownloadOutlined, RollbackOutlined } from '@ant-design/icons'\r\n\r\n\r\nfunction Reports(props) {\r\n\r\n    const [minerals, setMinerals] = useState([]);\r\n    const [dataLoading, setDataLoading] = useState(true);\r\n\r\n    const [mineralStock, setMineralStock] = useState([]);\r\n    const [powderStock, setPowderStock] = useState({});\r\n    const [infoType, setInfoType] = useState(null);\r\n    const [showMineralInfo, setShowMineralInfo] = useState(false);\r\n    const [totalPowderBalance, setTotalPowder] = useState(false);\r\n\r\n    const modalHeaders = [\r\n        \"\",\r\n        \"Mineral Info.\",\r\n        \"Powder Info.\"\r\n    ] \r\n\r\n   \r\n\r\n    useEffect(()=>{\r\n        axios.get(API_BASE + \"/api/mineralModel\").then((res) => {\r\n            console.log(res.data);\r\n            setMinerals(res.data.content);\r\n            setDataLoading(false);\r\n        }).catch(()=>{\r\n            window.location.reload();\r\n            failureToast('something went wrong in fetching the app data');\r\n        })\r\n    },[]) \r\n\r\n    const calMineralInfo = () => {\r\n        var j = [];\r\n        if(minerals.length != 0) {minerals.map((mineral) => {\r\n            var mineralBalance = 0;\r\n            mineral.rockTypes.map((rockType) => {\r\n                mineralBalance += rockType.typeBalance;\r\n            })  \r\n            j.push({mineralName: mineral.mineralName, mineralBalance : mineralBalance, measuringUnit : mineral.measuringUnit});\r\n        })\r\n        setMineralStock(j);\r\n        setShowMineralInfo(true)\r\n    }\r\n    };\r\n\r\n   \r\n    \r\n\r\n    return (\r\n        dataLoading == true ? <span><h2><br/></h2><Spin style={{paddingTop:'40px'}} size=\"large\" /><br/><br/>loading</span> :\r\n        <Row>\r\n            <Col span={2} style={{paddingTop: '10px'}}>\r\n                <Link to=\"/\"><Button type=\"ghost\" size=\"large\" style={{border: '0px'}}> <RollbackOutlined /> Back</Button></Link>\r\n            </Col>\r\n            <Col span={22} align=\"left\" style={{paddingTop: '20px', paddingLeft: '50px'}}> \r\n                <h3 style={{paddingLeft: '5px'}}>Reports</h3>\r\n                <br/> \r\n                    <Button style={{marginRight: '10px'}} onClick={()=>{setInfoType(1); calMineralInfo();}}>Minerals Info.</Button> \r\n                    <br/>\r\n                    <br/>\r\n                         <Button style={{marginRight: '10px'}} onClick={()=>{setInfoType(2); setShowMineralInfo(true);}}>Powder Info.</Button>\r\n                         <br/> \r\n                         <br/> \r\n                    <a style={{marginRight: '10px'}} href=\"http://localhost:3001/api/incomingEntryModel/allInReport\">\r\n                        <Button>Incoming Entries <DownloadOutlined style={{color:'#1890ff'}} size=\"large\"/></Button>\r\n                    </a>\r\n                    <br/>\r\n                    <br/>\r\n                    <a style={{marginRight: '10px'}} href=\"http://localhost:3001/api/grindingEntryModel/allInReport\">\r\n                        <Button>Grinding Entries <DownloadOutlined style={{color:'#1890ff'}}/></Button>\r\n                    </a>\r\n                    <br/>\r\n                    <br/>\r\n                    <a style={{marginRight: '10px'}} href=\"http://localhost:3001/api/powderDispatchingEntryModel/allInReport\">\r\n                        <Button>Powder Dispatching Entries <DownloadOutlined style={{color:'#1890ff'}}/></Button>\r\n                    </a> \r\n            </Col>\r\n            <Modal title={modalHeaders[infoType]} visible={showMineralInfo} \r\n        footer={[\r\n            <Button key=\"submit\" type=\"primary\" onClick={()=>{ \r\n                setShowMineralInfo(false);\r\n                }}>\r\n              Ok\r\n            </Button>, \r\n          ]}  onCancel={() => {setShowMineralInfo(false);}}> \r\n          <div style={{height:'40vh', overflowY:'scroll'}}>\r\n             {infoType == 1 ? <table>\r\n               <tr><td style={{border:'0px solid black', padding:'5px'}}><b> Mineral </b></td> <td style={{border:'0px solid black', padding:'5px'}}><b>Balance</b></td></tr>\r\n                            {\r\n                               mineralStock.length != 0 ? mineralStock.map((mineral) => {\r\n                               return <tr><td style={{border:'2px solid silver', padding:'5px 10px'}}>{mineral.mineralName} </td> <td style={{border:'2px solid silver', padding:'5px 10px'}}>{mineral.mineralBalance} {mineral.measuringUnit}</td></tr>\r\n                               }) : \"\"\r\n                            }\r\n            </table> : \"\"}\r\n            {infoType == 2 ?  <div>\r\n                            {\r\n                               minerals.length != 0 ? minerals.map((mineral) => {\r\n                                   var totalPowder\r\n                                   return <table style={{marginTop:'20px'}}><h4>{ mineral.mineralName }</h4>\r\n                                   {\r\n                                       mineral.powderGrades.length != 0 ? mineral.powderGrades.map((grade)=>{\r\n\r\n                                            return  <tr><td style={{border:'2px solid silver', padding:'5px 10px'}}>{grade.gradeName} </td> <td style={{border:'2px solid silver', padding:'5px 10px'}}>{grade.gradeBalance} {mineral.measuringUnit}</td></tr>\r\n                                                \r\n                                       }) : \"\"\r\n                                   }\r\n                               \r\n                               </table>}) : \"\"\r\n                            }\r\n            </div> : \"\"}\r\n            </div>\r\n        </Modal>\r\n        </Row>\r\n    );\r\n}\r\n\r\nexport default Reports;\r\n","import logo from './logo.svg';\nimport './App.css';\nimport 'antd/dist/antd.css'; // or 'antd/dist/antd.less'\nimport Forms from './Forms';\nimport Reports from './Reports';\n\nimport {\n  BrowserRouter,\n  Switch,\n  Route,\n  Link,\n} from 'react-router-dom';\n\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { Row, Button, Col } from 'antd';\nimport {LineChartOutlined, RollbackOutlined} from '@ant-design/icons';\n\n\nexport const successToast = (message) =>  toast.success(message, { \n    position: \"top-center\",\n    autoClose: 4000,\n    hideProgressBar: false,\n    closeOnClick: true,\n    pauseOnHover: true,\n    draggable: true,\n    progress: undefined, \n});\n\nexport const failureToast = (message) =>  toast.error(message, { \n  position: \"top-center\",\n  autoClose: 4000,\n  hideProgressBar: false,\n  closeOnClick: true,\n  pauseOnHover: true,\n  draggable: true,\n  progress: undefined, \n}); \n\nfunction App() {  \n \n  return (\n    <div className=\"App\"> \n    <BrowserRouter>\n     \n      <Switch>\n        <Route exact path=\"/\">\n          <div>\n          <Row>\n      <Col span={24}>\n      <div>\n                    <Row style={{backgroundColor: '#1890ff', padding: '5px 20px', margin: '0px -30px'}}>\n                        <Col span={12} style={{textAlign: \"left\"}}>\n                            <Button type=\"text\" style={{color: 'white', backgroundColor: 'transparent'}}\n                            onMouseOver={(e) => { \n                              e.target.style.cursor = \"none\"; \n                            }}\n                            size=\"large\">R. K. MINERALS <sub> Stock Register</sub></Button>\n                        </Col>\n                        <Col span={12} style={{textAlign: \"right\"}}>\n                            <Link to=\"/reports\"><Button type=\"ghost\" style={{color: 'white',  border: '0px'}} size=\"large\"> <LineChartOutlined /> Reports </Button></Link>\n                        </Col>\n                    </Row>\n                </div> \n      </Col>\n    </Row>\n\n    <Forms/>\n          </div>\n          \n        </Route>\n        <Route exact path=\"/reports\">\n        <div>\n          <Row>\n      <Col span={24}>\n      <div>\n                    <Row style={{backgroundColor: '#1890ff', padding: '5px 20px', margin: '0px -30px'}}>\n                        <Col span={12} style={{textAlign: \"left\"}}>\n                            <Button\n                             onMouseOver={(e) => { \n                              e.target.style.cursor = \"none\"; \n                            }}\n                             type=\"text\" style={{color: 'white', backgroundColor: 'transparent'}} size=\"large\">R. K. MINERALS</Button>\n                        </Col>\n                        <Col span={12} style={{textAlign: \"right\"}}>\n                               </Col>\n                    </Row>\n                </div> \n      </Col>\n    </Row>\n\n    <Reports/>\n          </div>\n        </Route>\n      </Switch>\n    </BrowserRouter> \n      <ToastContainer\n      position=\"bottom-right\" />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App /> \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}