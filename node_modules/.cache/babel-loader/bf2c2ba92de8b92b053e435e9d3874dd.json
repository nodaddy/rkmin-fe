{"ast":null,"code":"var _jsxFileName = \"/Users/neeleshsharma/Desktop/rkim-fe-1/src/Forms/powderDispatchEntryForm/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport moment from 'moment';\nimport { Row, Col, Form, Input, Button, Radio, Select, Cascader, DatePicker, InputNumber, TreeSelect, Switch, Modal } from 'antd';\nimport TextArea from 'antd/lib/input/TextArea';\nimport axios from 'axios';\nimport { API_BASE } from '../../apiBaseInfo';\nimport { successToast, failureToast } from '../../App';\nimport { LoadingOutlined } from '@ant-design/icons';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction PowderDispatchingEntryForm(props) {\n  _s();\n\n  const [componentSize, setComponentSize] = useState('small'); // composition: [{inputPartRatio: Number, supplier: String, rockType: String}],\n\n  const productionUnits = ['Unit 1', 'Unit 2'];\n  const shifts = ['Morning', 'Evening', 'Night'];\n  const [submitFormLoader, setSubmitFormLoader] = useState(false);\n  const [deleteByIdLoader, setDeleteByIdLoader] = useState(false); //form payload\n\n  const [date, setDate] = useState(null);\n  const [mineralId, setMineralId] = useState(null);\n  const [mineralName, setMineralName] = useState(null);\n  const [quantity, setQuantity] = useState(null);\n  const [gradeName, setGradeName] = useState(null);\n  const [remarks, setRemarks] = useState(null); // affirmation after saving into the DB\n\n  const [showAffirmation, setShowAffermation] = useState(false);\n  const [dataAffirmationFromDB, setDataAffirmationFromDB] = useState(null);\n  const [mineralForComponent, setMineralForComponent] = useState(null);\n  const [dateForComponent, setDateForComponent] = useState(null);\n\n  const sendEntry = () => {\n    if (date == null || mineralId == null || mineralName == null || quantity == null || gradeName == null) {\n      failureToast(\"All fields are required\");\n    } else {\n      setSubmitFormLoader(true);\n      axios.post(API_BASE + \"/api/powderDispatchingEntryModel\", {\n        \"dispatchingDate\": date,\n        \"mineralId\": mineralId,\n        \"mineralName\": mineralName,\n        \"gradeName\": gradeName,\n        \"quantityDispatched\": quantity,\n        \"remarks\": remarks\n      }).then(res => {\n        console.log(res.data.message);\n\n        if (res.data.message == 'success') {\n          axios.get(API_BASE + '/api/powderDispatchingEntryModel/getLastInserted').then(res => {\n            setDataAffirmationFromDB(res.data.content);\n          }).then(() => {\n            setShowAffermation(true);\n            setSubmitFormLoader(false);\n          });\n        }\n      }).catch(err => {\n        setSubmitFormLoader(false);\n        failureToast('Something went wrong while submitting the form');\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Row, {\n      style: {\n        height: '75vh',\n        overflowY: 'scroll',\n        paddingBottom: '20px',\n        paddingTop: '20px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Col, {\n        xs: {\n          span: 24\n        },\n        md: {\n          span: 20\n        },\n        children: /*#__PURE__*/_jsxDEV(Form, {\n          labelCol: {\n            span: 8\n          },\n          wrapperCol: {\n            span: 12\n          },\n          layout: \"horizontal\",\n          initialValues: {\n            size: componentSize\n          },\n          onValuesChange: () => {},\n          size: componentSize,\n          onFinish: values => {\n            console.log(values);\n          },\n          children: [/*#__PURE__*/_jsxDEV(Form.Item, {\n            label: \"Grinding Date\",\n            style: {\n              textAlign: 'left'\n            },\n            children: /*#__PURE__*/_jsxDEV(DatePicker, {\n              value: dateForComponent,\n              onChange: e => {\n                if (e) {\n                  console.log(e._d);\n                  setDateForComponent(moment(e._d));\n\n                  var date = e._d.toString();\n\n                  var dateArray = date.split(\" \"); // customDateString Day/Month/DateOFMonth/Year/\n\n                  var customDateString = `${dateArray[0]}/${dateArray[1]}/${dateArray[2]}/${dateArray[3]}`;\n                  setDate(customDateString);\n                }\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 102,\n              columnNumber: 11\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n            label: \"Mineral\",\n            children: /*#__PURE__*/_jsxDEV(Select, {\n              defaultValue: \"Select\",\n              value: mineralName,\n              onChange: value => {\n                console.log(value);\n                setMineralName(value);\n                props.minerals.map(mineral => {\n                  if (mineral.mineralName == value) {\n                    setMineralId(mineral._id);\n                    setMineralForComponent(mineral);\n                  }\n                });\n              },\n              children: props.minerals.map(mineral => {\n                return /*#__PURE__*/_jsxDEV(Select.Option, {\n                  value: mineral.mineralName,\n                  children: mineral.mineralName\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 129,\n                  columnNumber: 28\n                }, this);\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 115,\n              columnNumber: 11\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n            label: \"Grade\",\n            children: /*#__PURE__*/_jsxDEV(Select, {\n              value: gradeName,\n              onChange: value => {\n                setGradeName(value);\n              },\n              children: mineralForComponent != null ? mineralForComponent.powderGrades.map(grade => {\n                return /*#__PURE__*/_jsxDEV(Select.Option, {\n                  value: grade.gradeName,\n                  children: grade.gradeName\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 145,\n                  columnNumber: 24\n                }, this);\n              }) : \"\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 137,\n              columnNumber: 9\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n            label: \"Quantity Dispatched\",\n            style: {\n              textAlign: \"left\"\n            },\n            children: /*#__PURE__*/_jsxDEV(InputNumber, {\n              value: quantity,\n              onChange: value => {\n                if (value > 0) {\n                  setQuantity(value);\n                } else {\n                  failureToast(\"'Quantity' must be a positive number\");\n                }\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 153,\n              columnNumber: 11\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n            label: \"Remarks\",\n            style: {\n              textAlign: \"left\"\n            },\n            children: /*#__PURE__*/_jsxDEV(TextArea, {\n              placeholder: \"type here ...\",\n              value: remarks,\n              onChange: e => {\n                setRemarks(e.target.value);\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 162,\n              columnNumber: 11\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 9\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Col, {\n        xs: {\n          span: 24\n        },\n        md: {\n          span: 24\n        },\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          style: {},\n          type: \"primary\",\n          onClick: sendEntry,\n          children: submitFormLoader ? /*#__PURE__*/_jsxDEV(LoadingOutlined, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 169,\n            columnNumber: 85\n          }, this) : \"Save\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          style: {},\n          onClick: () => {\n            setShowAffermation(false);\n            setDateForComponent(null);\n            setRemarks(null);\n            setQuantity(null);\n            setMineralName(null);\n            setMineralId(null);\n            setGradeName(null);\n          },\n          type: \"link\",\n          children: \"Reset\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      title: \"Confirmation\",\n      visible: showAffirmation,\n      footer: [/*#__PURE__*/_jsxDEV(Button, {\n        type: \"ghost\",\n        onClick: () => {\n          setDeleteByIdLoader(true);\n          console.log(dataAffirmationFromDB); //delete the record from database and resubmit\n\n          axios.post(API_BASE + \"/api/powderDispatchingEntryModel/deleteById/\" + dataAffirmationFromDB[0]._id, dataAffirmationFromDB[0]).then(res => {// failureToast(res.data.message + \"deleted\");\n            // pdfEntryErrorReport.add(JSON.stringify(dataAffirmationFromDB));\n            // pdfEntryErrorReport.create().download();\n          }).then(() => {\n            setShowAffermation(false);\n            setDeleteByIdLoader(false);\n          }).catch(err => {\n            failureToast(\"Error! Not deleted\");\n            setDeleteByIdLoader(false);\n          });\n        },\n        children: deleteByIdLoader ? /*#__PURE__*/_jsxDEV(LoadingOutlined, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 34\n        }, this) : \"Edit\"\n      }, \"back\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        type: \"primary\",\n        onClick: () => {\n          successToast(\"Entry Saved\");\n          setShowAffermation(false);\n          setDateForComponent(null);\n          setRemarks(null);\n          setQuantity(null);\n          setMineralName(null);\n          setMineralId(null);\n          setGradeName(null);\n        },\n        children: \"Submit\"\n      }, \"submit\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 13\n      }, this) // <Button\n      //   key=\"link\"\n      //   href=\"https://google.com\"\n      //   type=\"primary\"\n      //   loading={loading}\n      //   onClick={this.handleOk}\n      // >\n      //   Search on Google\n      // </Button>,\n      ],\n      onCancel: () => {},\n      children: [\"Please re-examin the submitted document\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"sub\", {\n        children: \" Click on \\\"Submit\\\" to save or click on \\\"Edit\\\" to make changes  \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: dataAffirmationFromDB ? Object.keys(dataAffirmationFromDB[0]).map(key => {\n          if (key != \"_id\" && key != \"timeStamp\" && key != \"__v\") {\n            return /*#__PURE__*/_jsxDEV(\"li\", {\n              children: [key, \" : \", JSON.stringify(dataAffirmationFromDB[0][key])]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 234,\n              columnNumber: 29\n            }, this);\n          } else {\n            return \"\";\n          }\n        }) : \"\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}\n\n_s(PowderDispatchingEntryForm, \"bDRhnYC5wXAqLQgpZZ42ZaX82ek=\");\n\n_c = PowderDispatchingEntryForm;\nexport default PowderDispatchingEntryForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"PowderDispatchingEntryForm\");","map":{"version":3,"sources":["/Users/neeleshsharma/Desktop/rkim-fe-1/src/Forms/powderDispatchEntryForm/index.js"],"names":["React","useState","moment","Row","Col","Form","Input","Button","Radio","Select","Cascader","DatePicker","InputNumber","TreeSelect","Switch","Modal","TextArea","axios","API_BASE","successToast","failureToast","LoadingOutlined","PowderDispatchingEntryForm","props","componentSize","setComponentSize","productionUnits","shifts","submitFormLoader","setSubmitFormLoader","deleteByIdLoader","setDeleteByIdLoader","date","setDate","mineralId","setMineralId","mineralName","setMineralName","quantity","setQuantity","gradeName","setGradeName","remarks","setRemarks","showAffirmation","setShowAffermation","dataAffirmationFromDB","setDataAffirmationFromDB","mineralForComponent","setMineralForComponent","dateForComponent","setDateForComponent","sendEntry","post","then","res","console","log","data","message","get","content","catch","err","height","overflowY","paddingBottom","paddingTop","span","size","values","textAlign","e","_d","toString","dateArray","split","customDateString","value","minerals","map","mineral","_id","powderGrades","grade","target","Object","keys","key","JSON","stringify"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport moment from 'moment';\r\nimport {\r\n    Row,\r\n    Col,\r\n    Form,\r\n    Input,\r\n    Button,\r\n    Radio,\r\n    Select,\r\n    Cascader,\r\n    DatePicker,\r\n    InputNumber,\r\n    TreeSelect,\r\n    Switch,\r\n    Modal\r\n  } from 'antd';\r\nimport TextArea from 'antd/lib/input/TextArea';\r\nimport axios from 'axios';\r\nimport { API_BASE } from '../../apiBaseInfo';\r\nimport { successToast, failureToast } from '../../App';\r\nimport {LoadingOutlined} from '@ant-design/icons';\r\n\r\nfunction PowderDispatchingEntryForm(props) { \r\n        const [componentSize, setComponentSize] = useState('small');\r\n       \r\n        // composition: [{inputPartRatio: Number, supplier: String, rockType: String}],\r\n\r\n        const productionUnits = ['Unit 1', 'Unit 2']\r\n        const shifts = ['Morning', 'Evening', 'Night']\r\n\r\n        const [submitFormLoader, setSubmitFormLoader] = useState(false);\r\n        const [deleteByIdLoader, setDeleteByIdLoader] = useState(false);\r\n\r\n        //form payload\r\n        const [date, setDate] = useState(null); \r\n        const [mineralId, setMineralId] = useState(null); \r\n        const [mineralName, setMineralName] = useState(null);\r\n        const [quantity, setQuantity] = useState(null);\r\n        const [gradeName, setGradeName] = useState(null);\r\n        const [remarks, setRemarks] = useState(null);\r\n \r\n\r\n        // affirmation after saving into the DB\r\n        const [showAffirmation, setShowAffermation] = useState(false);\r\n        const [dataAffirmationFromDB, setDataAffirmationFromDB] = useState(null);\r\n\r\n        const [mineralForComponent, setMineralForComponent] = useState(null);\r\n        const [dateForComponent, setDateForComponent] = useState(null);\r\n\r\n        const sendEntry = () => { \r\n            if(date == null || mineralId == null || mineralName == null || quantity == null || gradeName == null){\r\n                failureToast(\"All fields are required\");\r\n            } else {\r\n          setSubmitFormLoader(true);\r\n            axios.post(API_BASE + \"/api/powderDispatchingEntryModel\",\r\n            {\r\n                \"dispatchingDate\": date,\r\n                \"mineralId\": mineralId,   \r\n                \"mineralName\": mineralName,\r\n                \"gradeName\": gradeName,\r\n                \"quantityDispatched\": quantity,\r\n                \"remarks\": remarks\r\n            }\r\n            ).then(res => {\r\n                console.log(res.data.message);\r\n                if(res.data.message == 'success'){\r\n                axios.get(API_BASE + '/api/powderDispatchingEntryModel/getLastInserted').then((res) => {\r\n                    setDataAffirmationFromDB(res.data.content);\r\n                }).then(()=>{\r\n                    setShowAffermation(true);\r\n                    setSubmitFormLoader(false);\r\n\r\n                })\r\n              }\r\n            }).catch(err => {\r\n              setSubmitFormLoader(false);\r\n              failureToast('Something went wrong while submitting the form');\r\n            })\r\n        }\r\n        }\r\n\r\n    return (\r\n        <>\r\n        <Row \r\n        style={{height: '75vh', overflowY: 'scroll', paddingBottom:'20px', paddingTop:'20px'}}\r\n        \r\n        >\r\n            <Col xs={{span:24}} md={{span:20}}>\r\n            <Form\r\n                labelCol={{ span: 8 }}\r\n                wrapperCol={{ span: 12 }}\r\n                layout=\"horizontal\"\r\n                initialValues={{ size: componentSize }}\r\n                onValuesChange={()=>{}}\r\n                size={componentSize}\r\n                onFinish={(values)=>{\r\n                    console.log(values);\r\n                }}\r\n      > \r\n        <Form.Item label=\"Grinding Date\" style={{textAlign:'left'}}>\r\n          <DatePicker value={dateForComponent} onChange={(e) => {\r\n              if(e){\r\n                console.log(e._d);\r\n                setDateForComponent(moment(e._d));\r\n                var date = e._d.toString();\r\n                var dateArray = date.split(\" \");\r\n                // customDateString Day/Month/DateOFMonth/Year/\r\n                var customDateString = `${dateArray[0]}/${dateArray[1]}/${dateArray[2]}/${dateArray[3]}`;\r\n                setDate(customDateString);\r\n              }\r\n          }} />\r\n        </Form.Item> \r\n        <Form.Item label=\"Mineral\">\r\n          <Select defaultValue={\"Select\"}\r\n          value={mineralName}\r\n          onChange={(value) => {\r\n            console.log(value);\r\n            setMineralName(value);\r\n            props.minerals.map((mineral) => {\r\n                if(mineral.mineralName == value){\r\n                    setMineralId(mineral._id);\r\n                    setMineralForComponent(mineral);\r\n                }\r\n            })\r\n          }}>\r\n              {\r\n                  props.minerals.map((mineral) => {\r\n                    return <Select.Option value={mineral.mineralName}>\r\n                            {mineral.mineralName}\r\n                        </Select.Option>\r\n                  })\r\n              } \r\n          </Select>\r\n        </Form.Item>\r\n        <Form.Item label=\"Grade\">\r\n        <Select\r\n        value={gradeName}\r\n        onChange={(value) => {\r\n            setGradeName(value);\r\n        }}\r\n        >\r\n              { \r\n                mineralForComponent != null ? mineralForComponent.powderGrades.map((grade) => {\r\n                return <Select.Option value={grade.gradeName}>{grade.gradeName}</Select.Option>\r\n                }) \r\n                :\r\n                \"\"\r\n              } \r\n          </Select>\r\n        </Form.Item>\r\n        <Form.Item label=\"Quantity Dispatched\" style={{textAlign:\"left\"}}>\r\n          <InputNumber value={quantity} onChange={(value) => {\r\n              if(value > 0){ setQuantity(value) }\r\n              else {  \r\n                failureToast(\"'Quantity' must be a positive number\");\r\n            }\r\n          }} />\r\n        </Form.Item> \r\n        \r\n        <Form.Item  label=\"Remarks\" style={{textAlign:\"left\"}}>\r\n          <TextArea placeholder=\"type here ...\" value={remarks} onChange={(e) => {\r\n              setRemarks(e.target.value);\r\n          }} />\r\n        </Form.Item>\r\n      </Form>\r\n      </Col>\r\n      <Col xs={{span:24}} md={{span:24}}>\r\n          <Button style={{}} type=\"primary\" onClick={sendEntry}>{submitFormLoader ? <LoadingOutlined/> : \"Save\"}</Button>  \r\n          <Button style={{}} onClick={()=>{\r\n               setShowAffermation(false); \r\n\r\n               setDateForComponent(null);\r\n               setRemarks(null);\r\n               setQuantity(null); \r\n               setMineralName(null);\r\n               setMineralId(null); \r\n               setGradeName(null); \r\n          }} type=\"link\">Reset</Button>\r\n      </Col>\r\n        </Row>\r\n\r\n        <Modal title=\"Confirmation\" visible={showAffirmation} \r\n        footer={[\r\n          <Button key=\"back\" type=\"ghost\" onClick={() => {\r\n            setDeleteByIdLoader(true);\r\n            console.log(dataAffirmationFromDB);\r\n              //delete the record from database and resubmit\r\n              axios.post(API_BASE + \"/api/powderDispatchingEntryModel/deleteById/\" + dataAffirmationFromDB[0]._id, dataAffirmationFromDB[0]).then((res)=>{\r\n                  // failureToast(res.data.message + \"deleted\");\r\n                  // pdfEntryErrorReport.add(JSON.stringify(dataAffirmationFromDB));\r\n                  // pdfEntryErrorReport.create().download();\r\n              }).then(()=>{\r\n                setShowAffermation(false);\r\n                setDeleteByIdLoader(false);\r\n              }).catch(err => {\r\n                failureToast(\"Error! Not deleted\")\r\n                setDeleteByIdLoader(false);\r\n              })\r\n          }}>{deleteByIdLoader ? <LoadingOutlined/> : \"Edit\"}\r\n          </Button>,\r\n            <Button key=\"submit\" type=\"primary\" onClick={()=>{\r\n                successToast(\"Entry Saved\");\r\n                setShowAffermation(false);\r\n                \r\n               setDateForComponent(null);\r\n               setRemarks(null);\r\n               setQuantity(null); \r\n               setMineralName(null);\r\n               setMineralId(null); \r\n               setGradeName(null); \r\n                }}>\r\n              Submit\r\n            </Button>,\r\n            // <Button\r\n            //   key=\"link\"\r\n            //   href=\"https://google.com\"\r\n            //   type=\"primary\"\r\n            //   loading={loading}\r\n            //   onClick={this.handleOk}\r\n            // >\r\n            //   Search on Google\r\n            // </Button>,\r\n          ]}  onCancel={() => {}}> \r\n            Please re-examin the submitted document\r\n            <br/>\r\n            <sub> Click on \"Submit\" to save or click on \"Edit\" to make changes  </sub>\r\n            <br/>\r\n            <hr/>\r\n            <ul>\r\n            {\r\n            dataAffirmationFromDB? Object.keys(dataAffirmationFromDB[0]).map((key) => {\r\n                if(key != \"_id\" && key != \"timeStamp\" && key != \"__v\") {\r\n                     return <li>{key} : {JSON.stringify(dataAffirmationFromDB[0][key])}</li>\r\n                } else {\r\n                    return \"\";\r\n                }\r\n            })\r\n            :\r\n            \"\"\r\n            }\r\n            </ul>\r\n        </Modal>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default PowderDispatchingEntryForm;"]},"metadata":{},"sourceType":"module"}