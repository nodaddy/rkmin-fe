{"ast":null,"code":"/**\n * The main generic class that defines the main properties of the class, T: defines the TYPE to use and I defined the interface that of \"content\" property will use\n */\nvar ContentDefinition = function () {\n  function ContentDefinition() {\n    /**\n     * The content that is shaped on every called method\n     */\n    this.content = {};\n  }\n\n  Object.defineProperty(ContentDefinition.prototype, \"end\", {\n    /**\n     * @returns  the built content\n     */\n    get: function () {\n      return this.content;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Break a page\n   * @param brk when it break a page (before, after)\n   */\n\n  ContentDefinition.prototype.pageBreak = function (brk) {\n    this.content.pageBreak = brk;\n    return this;\n  };\n  /**\n   * Change the orientation with a page break\n   * @param orientation The orientation\n   * @param brk the form of page break\n   */\n\n\n  ContentDefinition.prototype.pageOrientationAndBreak = function (orientation, brk) {\n    this.content.pageOrientation = orientation;\n    this.content.pageBreak = brk;\n    return this;\n  };\n  /**\n   * Helper to use with automatically page break\n   * @param data Any data\n   */\n\n\n  ContentDefinition.prototype.headlineLevel = function (data) {\n    this.content.headlineLevel = data;\n    return this;\n  };\n  /**\n   * Sets an ID to an object, This is useful for referencing an object\n   * @param id ID\n   */\n\n\n  ContentDefinition.prototype.id = function (id) {\n    this.content.id = id;\n    return this;\n  };\n\n  return ContentDefinition;\n}();\n\nexport { ContentDefinition };","map":{"version":3,"sources":["../../../src/lib/definitions/content-definition.ts"],"names":[],"mappings":"AAAA;;AAEG;AACH,IAAA,iBAAA,GAAA,YAAA;AAAA,WAAA,iBAAA,GAAA;AAEI;;AAEG;AACgB,SAAA,OAAA,GAAe,EAAf;AA+CtB;;AA1CG,EAAA,MAAA,CAAA,cAAA,CAAI,iBAAA,CAAA,SAAJ,EAAI,KAAJ,EAAO;AAHP;;AAEG;SACH,YAAA;AACI,aAAO,KAAK,OAAZ;AACH,KAFM;qBAAA;;AAAA,GAAP;AAIA;;;AAGG;;AACI,EAAA,iBAAA,CAAA,SAAA,CAAA,SAAA,GAAP,UAAiB,GAAjB,EAAwC;AACpC,SAAK,OAAL,CAAa,SAAb,GAAyB,GAAzB;AACA,WAAO,IAAP;AACH,GAHM;AAKP;;;;AAIG;;;AACI,EAAA,iBAAA,CAAA,SAAA,CAAA,uBAAA,GAAP,UAA+B,WAA/B,EAAsE,GAAtE,EAA6F;AACzF,SAAK,OAAL,CAAa,eAAb,GAA+B,WAA/B;AACA,SAAK,OAAL,CAAa,SAAb,GAAyB,GAAzB;AACA,WAAO,IAAP;AACH,GAJM;AAMP;;;AAGG;;;AACI,EAAA,iBAAA,CAAA,SAAA,CAAA,aAAA,GAAP,UAAqB,IAArB,EAA8B;AAC1B,SAAK,OAAL,CAAa,aAAb,GAA6B,IAA7B;AACA,WAAO,IAAP;AACH,GAHM;AAKP;;;AAGG;;;AACI,EAAA,iBAAA,CAAA,SAAA,CAAA,EAAA,GAAP,UAAU,EAAV,EAAoB;AAChB,SAAK,OAAL,CAAa,EAAb,GAAkB,EAAlB;AACA,WAAO,IAAP;AACH,GAHM;;AAKX,SAAA,iBAAA;AAAC,CApDD,EAAA","sourceRoot":"","sourcesContent":["/**\n * The main generic class that defines the main properties of the class, T: defines the TYPE to use and I defined the interface that of \"content\" property will use\n */\nvar ContentDefinition = /** @class */ (function () {\n    function ContentDefinition() {\n        /**\n         * The content that is shaped on every called method\n         */\n        this.content = {};\n    }\n    Object.defineProperty(ContentDefinition.prototype, \"end\", {\n        /**\n         * @returns  the built content\n         */\n        get: function () {\n            return this.content;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Break a page\n     * @param brk when it break a page (before, after)\n     */\n    ContentDefinition.prototype.pageBreak = function (brk) {\n        this.content.pageBreak = brk;\n        return this;\n    };\n    /**\n     * Change the orientation with a page break\n     * @param orientation The orientation\n     * @param brk the form of page break\n     */\n    ContentDefinition.prototype.pageOrientationAndBreak = function (orientation, brk) {\n        this.content.pageOrientation = orientation;\n        this.content.pageBreak = brk;\n        return this;\n    };\n    /**\n     * Helper to use with automatically page break\n     * @param data Any data\n     */\n    ContentDefinition.prototype.headlineLevel = function (data) {\n        this.content.headlineLevel = data;\n        return this;\n    };\n    /**\n     * Sets an ID to an object, This is useful for referencing an object\n     * @param id ID\n     */\n    ContentDefinition.prototype.id = function (id) {\n        this.content.id = id;\n        return this;\n    };\n    return ContentDefinition;\n}());\nexport { ContentDefinition };\n//# sourceMappingURL=content-definition.js.map"]},"metadata":{},"sourceType":"module"}