{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport { isBase64 } from './utils/is-base64';\n/**\n * Class that contains the essencial for the document definition\n */\n\nvar DocumentDefinition = function () {\n  function DocumentDefinition() {\n    /**\n     * It defines the pdf definition\n     */\n    this.definition = {\n      content: []\n    };\n\n    if (DocumentDefinition.usedFont) {\n      this.defaultStyle(DocumentDefinition.usedFont);\n    }\n  }\n  /**\n   * Sets the font that will be used to generate a PDF\n   * @param fontName The font type configuration name\n   */\n\n\n  DocumentDefinition.useFont = function (fontName) {\n    DocumentDefinition.usedFont = {\n      font: fontName\n    };\n  };\n  /**\n   * It adds content to the PDF body\n   * @param content any content\n   */\n\n\n  DocumentDefinition.prototype.add = function (content) {\n    this.definition.content.push(content);\n  };\n  /**\n   * Preload images setting a name to each images\n   *\n   * @example\n   * { picture1: 'data:image/jpeg;base64...' } or { picture1: await new Img('/path/image.png').build() }\n   *\n   * @param imgs Dictionary of default images\n   */\n\n\n  DocumentDefinition.prototype.images = function (imgs) {\n    var newImgs = {};\n\n    for (var img in imgs) {\n      if (typeof imgs[img] === 'string' && isBase64(imgs[img])) {\n        newImgs[img] = imgs[img]; // it's probably that the first condition is not passed for the regex condition, but it's a string yet\n      } else if (typeof imgs[img] !== 'string') {\n        newImgs[img] = imgs[img].image;\n      }\n    }\n\n    this.definition.images = newImgs;\n  };\n  /**\n   * Preload styles setting a name to each custom styles\n   *\n   * @example\n   * { style1: { bold: true, fontSize: 15 } }\n   *\n   * @param styles Dictionary of default styles\n   */\n\n\n  DocumentDefinition.prototype.styles = function (styles) {\n    this.definition.styles = styles;\n  };\n  /**\n   * Preload styles setting name to each custom style that is applied to whole PDF.\n   * Some styles won't work\n   *\n   * @example\n   * { style1: { bold: true, fontSize: 15 } }\n   *\n   * @param styles Dictionary of default styles\n   */\n\n\n  DocumentDefinition.prototype.defaultStyle = function (styles) {\n    this.definition.defaultStyle = __assign(__assign({}, this.definition.defaultStyle || {}), styles);\n  };\n  /**\n   * Set a header definition\n   * @param header Data that is applied as header\n   */\n\n\n  DocumentDefinition.prototype.header = function (header) {\n    this.definition.header = header;\n  };\n  /**\n   * Set a footer definition\n   * @param footer Data that is applied as footer\n   */\n\n\n  DocumentDefinition.prototype.footer = function (footer) {\n    this.definition.footer = footer;\n  };\n  /**\n   * Set a background layer definition\n   * @param background Data that is applied as background\n   */\n\n\n  DocumentDefinition.prototype.background = function (background) {\n    this.definition.background = background;\n  };\n  /**\n   * Set the page size\n   * @param size The page size\n   */\n\n\n  DocumentDefinition.prototype.pageSize = function (size) {\n    this.definition.pageSize = size;\n  };\n  /**\n   * Set the page margin\n   * @param margin The page margin\n   */\n\n\n  DocumentDefinition.prototype.pageMargins = function (margin) {\n    this.definition.pageMargins = margin;\n  };\n  /**\n   * Set the page orientation\n   * @param orientation the orientation\n   */\n\n\n  DocumentDefinition.prototype.pageOrientation = function (orientation) {\n    this.definition.pageOrientation = orientation;\n  };\n  /**\n   * Break the page before the condition defined\n   * @param breakBefore Function that defines the break of the page\n   */\n\n\n  DocumentDefinition.prototype.pageBreakBefore = function (breakBefore) {\n    this.definition.pageBreakBefore = breakBefore;\n  };\n  /**\n   * Set metadata to the document, you can set a custom metadata\n   * @param info The metadata\n   */\n\n\n  DocumentDefinition.prototype.info = function (info) {\n    this.definition.info = info;\n  };\n  /**\n   * It defines if use compress\n   * @param compress\n   */\n\n\n  DocumentDefinition.prototype.compress = function (compress) {\n    this.definition.compress = compress;\n  };\n  /**\n   * Set a watermark\n  */\n\n\n  DocumentDefinition.prototype.watermark = function (watermark) {\n    this.definition.watermark = watermark;\n  };\n  /**\n   * Set a raw content\n  */\n\n\n  DocumentDefinition.prototype.rawContent = function (content) {\n    this.definition.content = content;\n  };\n  /**\n   * Sets a password to the PDF to encrypt it and when an user wants to open the document\n   * a popup will be shown to type the password\n   * @param password\n   */\n\n\n  DocumentDefinition.prototype.userPassword = function (password) {\n    this.definition.userPassword = password;\n  };\n  /**\n   * Sets access privileges providing an owner password and the privileges setting\n   * @param password The password\n   * @param permissions The permission setting\n   */\n\n\n  DocumentDefinition.prototype.permissions = function (password, permissions) {\n    this.definition.ownerPassword = password;\n    this.definition.permissions = permissions;\n  };\n  /**\n   * Gets the document definition\n   */\n\n\n  DocumentDefinition.prototype.getDefinition = function () {\n    return this.definition;\n  };\n\n  return DocumentDefinition;\n}();\n\nexport { DocumentDefinition };","map":{"version":3,"sources":["../../src/lib/document-definition.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport { isBase64 } from './utils/is-base64';\n/**\n * Class that contains the essencial for the document definition\n */\nvar DocumentDefinition = /** @class */ (function () {\n    function DocumentDefinition() {\n        /**\n         * It defines the pdf definition\n         */\n        this.definition = {\n            content: []\n        };\n        if (DocumentDefinition.usedFont) {\n            this.defaultStyle(DocumentDefinition.usedFont);\n        }\n    }\n    /**\n     * Sets the font that will be used to generate a PDF\n     * @param fontName The font type configuration name\n     */\n    DocumentDefinition.useFont = function (fontName) {\n        DocumentDefinition.usedFont = { font: fontName };\n    };\n    /**\n     * It adds content to the PDF body\n     * @param content any content\n     */\n    DocumentDefinition.prototype.add = function (content) {\n        this.definition.content.push(content);\n    };\n    /**\n     * Preload images setting a name to each images\n     *\n     * @example\n     * { picture1: 'data:image/jpeg;base64...' } or { picture1: await new Img('/path/image.png').build() }\n     *\n     * @param imgs Dictionary of default images\n     */\n    DocumentDefinition.prototype.images = function (imgs) {\n        var newImgs = {};\n        for (var img in imgs) {\n            if (typeof imgs[img] === 'string' && isBase64(imgs[img])) {\n                newImgs[img] = imgs[img];\n                // it's probably that the first condition is not passed for the regex condition, but it's a string yet\n            }\n            else if (typeof imgs[img] !== 'string') {\n                newImgs[img] = imgs[img].image;\n            }\n        }\n        this.definition.images = newImgs;\n    };\n    /**\n     * Preload styles setting a name to each custom styles\n     *\n     * @example\n     * { style1: { bold: true, fontSize: 15 } }\n     *\n     * @param styles Dictionary of default styles\n     */\n    DocumentDefinition.prototype.styles = function (styles) {\n        this.definition.styles = styles;\n    };\n    /**\n     * Preload styles setting name to each custom style that is applied to whole PDF.\n     * Some styles won't work\n     *\n     * @example\n     * { style1: { bold: true, fontSize: 15 } }\n     *\n     * @param styles Dictionary of default styles\n     */\n    DocumentDefinition.prototype.defaultStyle = function (styles) {\n        this.definition.defaultStyle = __assign(__assign({}, (this.definition.defaultStyle || {})), styles);\n    };\n    /**\n     * Set a header definition\n     * @param header Data that is applied as header\n     */\n    DocumentDefinition.prototype.header = function (header) {\n        this.definition.header = header;\n    };\n    /**\n     * Set a footer definition\n     * @param footer Data that is applied as footer\n     */\n    DocumentDefinition.prototype.footer = function (footer) {\n        this.definition.footer = footer;\n    };\n    /**\n     * Set a background layer definition\n     * @param background Data that is applied as background\n     */\n    DocumentDefinition.prototype.background = function (background) {\n        this.definition.background = background;\n    };\n    /**\n     * Set the page size\n     * @param size The page size\n     */\n    DocumentDefinition.prototype.pageSize = function (size) {\n        this.definition.pageSize = size;\n    };\n    /**\n     * Set the page margin\n     * @param margin The page margin\n     */\n    DocumentDefinition.prototype.pageMargins = function (margin) {\n        this.definition.pageMargins = margin;\n    };\n    /**\n     * Set the page orientation\n     * @param orientation the orientation\n     */\n    DocumentDefinition.prototype.pageOrientation = function (orientation) {\n        this.definition.pageOrientation = orientation;\n    };\n    /**\n     * Break the page before the condition defined\n     * @param breakBefore Function that defines the break of the page\n     */\n    DocumentDefinition.prototype.pageBreakBefore = function (breakBefore) {\n        this.definition.pageBreakBefore = breakBefore;\n    };\n    /**\n     * Set metadata to the document, you can set a custom metadata\n     * @param info The metadata\n     */\n    DocumentDefinition.prototype.info = function (info) {\n        this.definition.info = info;\n    };\n    /**\n     * It defines if use compress\n     * @param compress\n     */\n    DocumentDefinition.prototype.compress = function (compress) {\n        this.definition.compress = compress;\n    };\n    /**\n     * Set a watermark\n    */\n    DocumentDefinition.prototype.watermark = function (watermark) {\n        this.definition.watermark = watermark;\n    };\n    /**\n     * Set a raw content\n    */\n    DocumentDefinition.prototype.rawContent = function (content) {\n        this.definition.content = content;\n    };\n    /**\n     * Sets a password to the PDF to encrypt it and when an user wants to open the document\n     * a popup will be shown to type the password\n     * @param password\n     */\n    DocumentDefinition.prototype.userPassword = function (password) {\n        this.definition.userPassword = password;\n    };\n    /**\n     * Sets access privileges providing an owner password and the privileges setting\n     * @param password The password\n     * @param permissions The permission setting\n     */\n    DocumentDefinition.prototype.permissions = function (password, permissions) {\n        this.definition.ownerPassword = password;\n        this.definition.permissions = permissions;\n    };\n    /**\n     * Gets the document definition\n     */\n    DocumentDefinition.prototype.getDefinition = function () {\n        return this.definition;\n    };\n    return DocumentDefinition;\n}());\nexport { DocumentDefinition };\n//# sourceMappingURL=document-definition.js.map"]},"metadata":{},"sourceType":"module"}