{"ast":null,"code":"/**\n * Abstract class that defines the common properties of a vector\n */\nvar Vector = function () {\n  /**\n   * @param type Vector type\n   */\n  function Vector(type) {\n    this.content = {};\n    this.content.type = type;\n  }\n\n  Object.defineProperty(Vector.prototype, \"end\", {\n    /**\n     * @returns  the built content\n     */\n    get: function () {\n      return this.content;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Sets a color to the vector\n   * @param color The color\n   * @returns T\n   */\n\n  Vector.prototype.color = function (color) {\n    this.content.color = color;\n    return this;\n  };\n  /**\n   * Sets a color to the line\n   * @param lineColor the color\n   * @returns T\n   */\n\n\n  Vector.prototype.lineColor = function (lineColor) {\n    this.content.lineColor = lineColor;\n    return this;\n  };\n  /**\n   * Sets the width of the line\n   * @param lineWidth the width\n   * @returns T\n   */\n\n\n  Vector.prototype.lineWidth = function (lineWidth) {\n    this.content.lineWidth = lineWidth;\n    return this;\n  };\n  /**\n   * Defines the boder type of a line\n   * @param type 'round' | 'square'\n   * @returns T\n   */\n\n\n  Vector.prototype.lineCap = function (type) {\n    this.content.lineCap = type;\n    return this;\n  };\n  /**\n   * Sets opacity to the vector\n   * @param fillOpacity the number of opacity\n   * @returns T\n   */\n\n\n  Vector.prototype.fillOpacity = function (fillOpacity) {\n    this.content.fillOpacity = fillOpacity;\n    return this;\n  };\n  /**\n   * Sets a linear gradient to the vector\n   * @param linearGradient an array of given colors\n   * @returns T\n   */\n\n\n  Vector.prototype.linearGradient = function (linearGradient) {\n    this.content.linearGradient = linearGradient;\n    return this;\n  };\n  /**\n   * Sets a dash on the line of the vector\n   * @param length The length of the dash\n   * @returns T\n   */\n\n\n  Vector.prototype.dash = function (length) {\n    this.content.dash = {\n      length: length\n    };\n    return this;\n  };\n\n  return Vector;\n}();\n\nexport { Vector };","map":{"version":3,"sources":["../../../../src/lib/definitions/vector/vector.ts"],"names":[],"mappings":"AAAA;;AAEG;AACH,IAAA,MAAA,GAAA,YAAA;AAUI;;AAEG;AACH,WAAA,MAAA,CAAY,IAAZ,EAAwB;AAZL,SAAA,OAAA,GAAe,EAAf;AAaf,SAAK,OAAL,CAAa,IAAb,GAAoB,IAApB;AACH;;AATD,EAAA,MAAA,CAAA,cAAA,CAAI,MAAA,CAAA,SAAJ,EAAI,KAAJ,EAAO;AAHP;;AAEG;SACH,YAAA;AACI,aAAO,KAAK,OAAZ;AACH,KAFM;qBAAA;;AAAA,GAAP;AAWA;;;;AAIG;;AACI,EAAA,MAAA,CAAA,SAAA,CAAA,KAAA,GAAP,UAAa,KAAb,EAA0B;AACtB,SAAK,OAAL,CAAa,KAAb,GAAqB,KAArB;AACA,WAAO,IAAP;AACH,GAHM;AAKP;;;;AAIG;;;AACI,EAAA,MAAA,CAAA,SAAA,CAAA,SAAA,GAAP,UAAiB,SAAjB,EAAkC;AAC9B,SAAK,OAAL,CAAa,SAAb,GAAyB,SAAzB;AACA,WAAO,IAAP;AACH,GAHM;AAKP;;;;AAIG;;;AACI,EAAA,MAAA,CAAA,SAAA,CAAA,SAAA,GAAP,UAAiB,SAAjB,EAAkC;AAC9B,SAAK,OAAL,CAAa,SAAb,GAAyB,SAAzB;AACA,WAAO,IAAP;AACH,GAHM;AAKP;;;;AAIG;;;AACI,EAAA,MAAA,CAAA,SAAA,CAAA,OAAA,GAAP,UAAe,IAAf,EAAuC;AACnC,SAAK,OAAL,CAAa,OAAb,GAAuB,IAAvB;AACA,WAAO,IAAP;AACH,GAHM;AAKP;;;;AAIG;;;AACI,EAAA,MAAA,CAAA,SAAA,CAAA,WAAA,GAAP,UAAmB,WAAnB,EAAsC;AAClC,SAAK,OAAL,CAAa,WAAb,GAA2B,WAA3B;AACA,WAAO,IAAP;AACH,GAHM;AAKP;;;;AAIG;;;AACI,EAAA,MAAA,CAAA,SAAA,CAAA,cAAA,GAAP,UAAsB,cAAtB,EAA8C;AAC1C,SAAK,OAAL,CAAa,cAAb,GAA8B,cAA9B;AACA,WAAO,IAAP;AACH,GAHM;AAKP;;;;AAIG;;;AACI,EAAA,MAAA,CAAA,SAAA,CAAA,IAAA,GAAP,UAAY,MAAZ,EAA0B;AACtB,SAAK,OAAL,CAAa,IAAb,GAAoB;AAAE,MAAA,MAAM,EAAA;AAAR,KAApB;AACA,WAAO,IAAP;AACH,GAHM;;AAIX,SAAA,MAAA;AAAC,CAtFD,EAAA","sourceRoot":"","sourcesContent":["/**\n * Abstract class that defines the common properties of a vector\n */\nvar Vector = /** @class */ (function () {\n    /**\n     * @param type Vector type\n     */\n    function Vector(type) {\n        this.content = {};\n        this.content.type = type;\n    }\n    Object.defineProperty(Vector.prototype, \"end\", {\n        /**\n         * @returns  the built content\n         */\n        get: function () {\n            return this.content;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Sets a color to the vector\n     * @param color The color\n     * @returns T\n     */\n    Vector.prototype.color = function (color) {\n        this.content.color = color;\n        return this;\n    };\n    /**\n     * Sets a color to the line\n     * @param lineColor the color\n     * @returns T\n     */\n    Vector.prototype.lineColor = function (lineColor) {\n        this.content.lineColor = lineColor;\n        return this;\n    };\n    /**\n     * Sets the width of the line\n     * @param lineWidth the width\n     * @returns T\n     */\n    Vector.prototype.lineWidth = function (lineWidth) {\n        this.content.lineWidth = lineWidth;\n        return this;\n    };\n    /**\n     * Defines the boder type of a line\n     * @param type 'round' | 'square'\n     * @returns T\n     */\n    Vector.prototype.lineCap = function (type) {\n        this.content.lineCap = type;\n        return this;\n    };\n    /**\n     * Sets opacity to the vector\n     * @param fillOpacity the number of opacity\n     * @returns T\n     */\n    Vector.prototype.fillOpacity = function (fillOpacity) {\n        this.content.fillOpacity = fillOpacity;\n        return this;\n    };\n    /**\n     * Sets a linear gradient to the vector\n     * @param linearGradient an array of given colors\n     * @returns T\n     */\n    Vector.prototype.linearGradient = function (linearGradient) {\n        this.content.linearGradient = linearGradient;\n        return this;\n    };\n    /**\n     * Sets a dash on the line of the vector\n     * @param length The length of the dash\n     * @returns T\n     */\n    Vector.prototype.dash = function (length) {\n        this.content.dash = { length: length };\n        return this;\n    };\n    return Vector;\n}());\nexport { Vector };\n//# sourceMappingURL=vector.js.map"]},"metadata":{},"sourceType":"module"}