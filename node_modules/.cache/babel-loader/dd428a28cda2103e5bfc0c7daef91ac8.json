{"ast":null,"code":"var _jsxFileName = \"/Users/neeleshsharma/Desktop/r/src/Forms/grindingEntryForm/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport moment from 'moment';\nimport { PdfMakeWrapper } from 'pdfmake-wrapper';\nimport * as pdfFonts from \"pdfmake/build/vfs_fonts\";\nimport { Row, Col, Form, Input, Button, Radio, Select, Cascader, DatePicker, InputNumber, TreeSelect, Switch, Modal } from 'antd';\nimport TextArea from 'antd/lib/input/TextArea';\nimport axios from 'axios';\nimport { API_BASE } from '../../apiBaseInfo';\nimport { successToast, failureToast } from '../../App';\nimport { LoadingOutlined } from '@ant-design/icons';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction GrindingEntryForm(props) {\n  _s();\n\n  PdfMakeWrapper.setFonts(pdfFonts);\n  const pdfEntryErrorReport = new PdfMakeWrapper();\n  const [componentSize, setComponentSize] = useState('small');\n  const [submitFormLoader, setSubmitFormLoader] = useState(false);\n  const [deleteByIdLoader, setDeleteByIdLoader] = useState(false); // composition: [{inputPartRatio: Number, supplier: String, rockType: String}],\n\n  const productionUnits = ['Unit 1', 'Unit 2'];\n  const shifts = ['Morning', 'Evening', 'Night']; //form payload\n\n  const [date, setDate] = useState(null);\n  const [productionUnit, setProductionUnit] = useState(null);\n  const [mineralId, setMineralId] = useState(null);\n  const [shift, setShift] = useState(null);\n  const [mineralName, setMineralName] = useState(null);\n  const [quantity, setQuantity] = useState(null);\n  const [gradeName, setGradeName] = useState(null);\n  const [composition, setComposition] = useState([]); //for composition\n\n  const [rockType, setRockType] = useState(null);\n  const [supplier, setSupplier] = useState(null);\n  const [partRatio, setPartRatio] = useState(null); // affirmation after saving into the DB\n\n  const [showAffirmation, setShowAffermation] = useState(false);\n  const [dataAffirmationFromDB, setDataAffirmationFromDB] = useState(null);\n  const [mineralForComponent, setMineralForComponent] = useState(null);\n  const [dateForComponent, setDateForComponent] = useState(null);\n\n  const sendEntry = () => {\n    console.log(composition);\n    var partRatioSum = 0;\n\n    if (composition.length != 0) {\n      composition.map(part => {\n        partRatioSum += part.inputPartRatio;\n      });\n    }\n\n    if (date == null || mineralId == null || mineralName == null || quantity == null || composition == [] || gradeName == null || productionUnit == null || shift == null) {\n      failureToast(\"All fields are required\");\n    } else if (partRatioSum < 1 || partRatioSum > 1) {\n      failureToast(\"Sum of constituent partRatios must be 1\");\n    } else {\n      setSubmitFormLoader(true);\n      axios.post(API_BASE + \"/api/grindingEntryModel\", {\n        \"grindingDate\": date,\n        \"productionUnitUsed\": productionUnit,\n        \"shift\": shift,\n        \"mineralId\": mineralId,\n        \"mineralName\": mineralName,\n        \"gradeName\": gradeName,\n        \"quantityProduced\": quantity,\n        \"composition\": composition\n      }).then(res => {\n        console.log(res.data.message);\n\n        if (res.data.message == \"success\") {\n          axios.get(API_BASE + '/api/grindingEntryModel/getLastInserted').then(res => {\n            setDataAffirmationFromDB(res.data.content);\n          }).then(() => {\n            setShowAffermation(true);\n            setSubmitFormLoader(false);\n          });\n        }\n      }).catch(err => {\n        setSubmitFormLoader(false);\n        failureToast('Something went wrong while submitting the form');\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Row, {\n      style: {\n        height: '75vh',\n        overflowY: 'scroll',\n        paddingBottom: '20px',\n        paddingTop: '20px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Col, {\n        xs: {\n          span: 24\n        },\n        md: {\n          span: 20\n        },\n        children: /*#__PURE__*/_jsxDEV(Form, {\n          labelCol: {\n            span: 8\n          },\n          wrapperCol: {\n            span: 12\n          },\n          layout: \"horizontal\",\n          initialValues: {\n            size: componentSize\n          },\n          onValuesChange: () => {},\n          size: componentSize,\n          onFinish: values => {\n            console.log(values);\n          },\n          children: [/*#__PURE__*/_jsxDEV(Form.Item, {\n            label: \"Grinding Date\",\n            style: {\n              textAlign: 'left'\n            },\n            children: /*#__PURE__*/_jsxDEV(DatePicker, {\n              value: dateForComponent,\n              onChange: e => {\n                if (e) {\n                  console.log(e._d);\n                  setDateForComponent(moment(e._d));\n\n                  var date = e._d.toString();\n\n                  var dateArray = date.split(\" \"); // customDateString Day/Month/DateOFMonth/Year/\n\n                  var customDateString = `${dateArray[0]}/${dateArray[1]}/${dateArray[2]}/${dateArray[3]}`;\n                  setDate(customDateString);\n                }\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 121,\n              columnNumber: 11\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n            label: \"Production Unit\",\n            children: /*#__PURE__*/_jsxDEV(Select, {\n              defaultValue: \"Select\",\n              value: productionUnit,\n              onChange: value => {\n                console.log(value);\n                setProductionUnit(value);\n              },\n              children: productionUnits.map(unit => {\n                return /*#__PURE__*/_jsxDEV(Select.Option, {\n                  value: unit,\n                  children: unit\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 142,\n                  columnNumber: 28\n                }, this);\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 134,\n              columnNumber: 11\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n            label: \"Shift\",\n            children: /*#__PURE__*/_jsxDEV(Select, {\n              defaultValue: \"Select\",\n              value: shift,\n              onChange: value => {\n                console.log(value);\n                setShift(value);\n              },\n              children: shifts.map(shift => {\n                return /*#__PURE__*/_jsxDEV(Select.Option, {\n                  value: shift,\n                  children: shift\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 158,\n                  columnNumber: 28\n                }, this);\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 150,\n              columnNumber: 11\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n            label: \"Mineral\",\n            children: /*#__PURE__*/_jsxDEV(Select, {\n              defaultValue: \"Select\",\n              value: mineralName,\n              onChange: value => {\n                console.log(value);\n                setMineralName(value);\n                props.minerals.map(mineral => {\n                  if (mineral.mineralName == value) {\n                    setMineralId(mineral._id);\n                    setMineralForComponent(mineral);\n                  }\n                });\n              },\n              children: props.minerals.map(mineral => {\n                return /*#__PURE__*/_jsxDEV(Select.Option, {\n                  value: mineral.mineralName,\n                  children: mineral.mineralName\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 180,\n                  columnNumber: 28\n                }, this);\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 166,\n              columnNumber: 11\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n            label: \"Grade\",\n            children: /*#__PURE__*/_jsxDEV(Select, {\n              value: gradeName,\n              onChange: value => {\n                setGradeName(value);\n              },\n              children: mineralForComponent != null ? mineralForComponent.powderGrades.map(grade => {\n                return /*#__PURE__*/_jsxDEV(Select.Option, {\n                  value: grade.gradeName,\n                  children: grade.gradeName\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 196,\n                  columnNumber: 24\n                }, this);\n              }) : \"\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 188,\n              columnNumber: 9\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 187,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n            label: \"Quantity\",\n            style: {\n              textAlign: \"left\"\n            },\n            children: /*#__PURE__*/_jsxDEV(InputNumber, {\n              value: quantity,\n              onChange: value => {\n                if (value > 0) {\n                  setQuantity(value);\n                } else {\n                  failureToast(\"'Quantity' must be a positive number\");\n                }\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 204,\n              columnNumber: 11\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 203,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n            label: \"Composition\",\n            style: {\n              textAlign: \"left\"\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"sub\", {\n              children: \"Part Ratio\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 212,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 212,\n              columnNumber: 32\n            }, this), /*#__PURE__*/_jsxDEV(InputNumber, {\n              value: partRatio,\n              onChange: value => {\n                if (value > 0) {\n                  setPartRatio(value);\n                }\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 213,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 215,\n              columnNumber: 16\n            }, this), /*#__PURE__*/_jsxDEV(\"sub\", {\n              children: \"Supplier\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 216,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(Select, {\n              value: supplier,\n              onChange: value => {\n                setSupplier(value);\n              },\n              children: mineralForComponent != null ? mineralForComponent.suppliers.map(supplier => {\n                return /*#__PURE__*/_jsxDEV(Select.Option, {\n                  value: supplier,\n                  children: supplier\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 225,\n                  columnNumber: 24\n                }, this);\n              }) : \"\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 217,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(\"sub\", {\n              children: \"Rock type\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 231,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(Select, {\n              value: rockType,\n              onChange: value => {\n                setRockType(value);\n              },\n              children: mineralForComponent != null ? mineralForComponent.rockTypes.map(rockType => {\n                if (rockType.supplier == supplier) {\n                  return /*#__PURE__*/_jsxDEV(Select.Option, {\n                    value: rockType.rockType,\n                    children: rockType.rockType\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 242,\n                    columnNumber: 36\n                  }, this);\n                }\n              }) : \"\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 233,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              style: {\n                marginTop: '5px'\n              },\n              onClick: () => {\n                if (partRatio == null || supplier == null || rockType == null) {\n                  failureToast(\"Empty fields in 'Composition' are not allowed\");\n                } else {\n                  const compositionPart = {\n                    inputPartRatio: partRatio,\n                    supplier: supplier,\n                    rockType: rockType\n                  };\n                  composition.push(compositionPart);\n                  setPartRatio(null);\n                  setSupplier(null);\n                  setRockType(null);\n                }\n              },\n              children: \"Add\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 249,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              style: {\n                marginLeft: '20px'\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                style: {\n                  borderRadius: '2px',\n                  padding: '3.5px',\n                  marginLeft: '15px',\n                  color: 'yellow',\n                  backgroundColor: '#1890ff'\n                },\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  style: {\n                    color: 'yellow'\n                  },\n                  children: composition.length\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 265,\n                  columnNumber: 15\n                }, this), \" constituents\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 264,\n                columnNumber: 11\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                style: {\n                  marginTop: '2px',\n                  marginLeft: '3px',\n                  border: '1px solid #1890ff'\n                },\n                onClick: () => {\n                  setComposition([]);\n                },\n                children: \"Reset constituents\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 267,\n                columnNumber: 11\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 263,\n              columnNumber: 11\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 211,\n            columnNumber: 9\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Col, {\n        xs: {\n          span: 24\n        },\n        md: {\n          span: 24\n        },\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          style: {},\n          type: \"primary\",\n          onClick: sendEntry,\n          children: submitFormLoader ? /*#__PURE__*/_jsxDEV(LoadingOutlined, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 280,\n            columnNumber: 85\n          }, this) : \"Save\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 280,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          style: {},\n          onClick: () => {\n            setShowAffermation(false);\n            setDateForComponent(null);\n            setShift(null);\n            setQuantity(null);\n            setComposition([]);\n            setMineralName(null);\n            setMineralId(null);\n            setGradeName(null);\n            setProductionUnit(null);\n          },\n          type: \"link\",\n          children: \"Reset\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 281,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      title: \"Confirmation\",\n      visible: showAffirmation,\n      footer: [/*#__PURE__*/_jsxDEV(Button, {\n        type: \"ghost\",\n        onClick: () => {\n          setDeleteByIdLoader(true);\n          console.log(dataAffirmationFromDB); //delete the record from database and resubmit\n\n          axios.post(API_BASE + \"/api/grindingEntryModel/deleteById/\" + dataAffirmationFromDB[0]._id, dataAffirmationFromDB[0]).then(res => {// failureToast(res.data.message + \"deleted\");\n            // pdfEntryErrorReport.add(JSON.stringify(dataAffirmationFromDB));\n            // pdfEntryErrorReport.create().download();\n          }).then(() => {\n            setShowAffermation(false);\n            setDeleteByIdLoader(false);\n          }).catch(err => {\n            failureToast(\"Error! Not deleted\");\n            setDeleteByIdLoader(false);\n          });\n        },\n        children: deleteByIdLoader ? /*#__PURE__*/_jsxDEV(LoadingOutlined, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 313,\n          columnNumber: 36\n        }, this) : \"Edit\"\n      }, \"back\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        type: \"primary\",\n        onClick: () => {\n          successToast(\"Entry Saved\");\n          setShowAffermation(false);\n          setDateForComponent(null);\n          setShift(null);\n          setQuantity(null);\n          setComposition([]);\n          setMineralName(null);\n          setMineralId(null);\n          setGradeName(null);\n          setProductionUnit(null);\n        },\n        children: \"Done\"\n      }, \"submit\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 315,\n        columnNumber: 13\n      }, this) // <Button\n      //   key=\"link\"\n      //   href=\"https://google.com\"\n      //   type=\"primary\"\n      //   loading={loading}\n      //   onClick={this.handleOk}\n      // >\n      //   Search on Google\n      // </Button>,\n      ],\n      onCancel: () => {},\n      children: [\"Please re-examin the submitted document\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 341,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"sub\", {\n        children: \" Click on \\\"Submit\\\" to save or click on \\\"Edit\\\" to make changes  \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 342,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 343,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 344,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: dataAffirmationFromDB ? Object.keys(dataAffirmationFromDB[0]).map(key => {\n          if (key != \"_id\" && key != \"timeStamp\" && key != \"__v\") {\n            return /*#__PURE__*/_jsxDEV(\"li\", {\n              children: [key, \" : \", JSON.stringify(dataAffirmationFromDB[0][key])]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 349,\n              columnNumber: 29\n            }, this);\n          } else {\n            return \"\";\n          }\n        }) : \"\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 345,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 296,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}\n\n_s(GrindingEntryForm, \"tmTvvGlRxwpZsufKA6PacfnogkA=\");\n\n_c = GrindingEntryForm;\nexport default GrindingEntryForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"GrindingEntryForm\");","map":{"version":3,"sources":["/Users/neeleshsharma/Desktop/r/src/Forms/grindingEntryForm/index.js"],"names":["React","useState","moment","PdfMakeWrapper","pdfFonts","Row","Col","Form","Input","Button","Radio","Select","Cascader","DatePicker","InputNumber","TreeSelect","Switch","Modal","TextArea","axios","API_BASE","successToast","failureToast","LoadingOutlined","GrindingEntryForm","props","setFonts","pdfEntryErrorReport","componentSize","setComponentSize","submitFormLoader","setSubmitFormLoader","deleteByIdLoader","setDeleteByIdLoader","productionUnits","shifts","date","setDate","productionUnit","setProductionUnit","mineralId","setMineralId","shift","setShift","mineralName","setMineralName","quantity","setQuantity","gradeName","setGradeName","composition","setComposition","rockType","setRockType","supplier","setSupplier","partRatio","setPartRatio","showAffirmation","setShowAffermation","dataAffirmationFromDB","setDataAffirmationFromDB","mineralForComponent","setMineralForComponent","dateForComponent","setDateForComponent","sendEntry","console","log","partRatioSum","length","map","part","inputPartRatio","post","then","res","data","message","get","content","catch","err","height","overflowY","paddingBottom","paddingTop","span","size","values","textAlign","e","_d","toString","dateArray","split","customDateString","value","unit","minerals","mineral","_id","powderGrades","grade","suppliers","rockTypes","marginTop","compositionPart","push","marginLeft","borderRadius","padding","color","backgroundColor","border","Object","keys","key","JSON","stringify"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,SAASC,cAAT,QAA+B,iBAA/B;AACA,OAAO,KAAKC,QAAZ,MAA0B,yBAA1B;AAEA,SACIC,GADJ,EAEIC,GAFJ,EAGIC,IAHJ,EAIIC,KAJJ,EAKIC,MALJ,EAMIC,KANJ,EAOIC,MAPJ,EAQIC,QARJ,EASIC,UATJ,EAUIC,WAVJ,EAWIC,UAXJ,EAYIC,MAZJ,EAaIC,KAbJ,QAcS,MAdT;AAeA,OAAOC,QAAP,MAAqB,yBAArB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,mBAAzB;AACA,SAASC,YAAT,EAAuBC,YAAvB,QAA2C,WAA3C;AACA,SAAQC,eAAR,QAA8B,mBAA9B;;;;AAEA,SAASC,iBAAT,CAA2BC,KAA3B,EAAkC;AAAA;;AAC1BtB,EAAAA,cAAc,CAACuB,QAAf,CAAwBtB,QAAxB;AACA,QAAMuB,mBAAmB,GAAG,IAAIxB,cAAJ,EAA5B;AAEA,QAAM,CAACyB,aAAD,EAAgBC,gBAAhB,IAAoC5B,QAAQ,CAAC,OAAD,CAAlD;AAEA,QAAM,CAAC6B,gBAAD,EAAmBC,mBAAnB,IAA0C9B,QAAQ,CAAC,KAAD,CAAxD;AACA,QAAM,CAAC+B,gBAAD,EAAmBC,mBAAnB,IAA0ChC,QAAQ,CAAC,KAAD,CAAxD,CAP0B,CAS1B;;AAEA,QAAMiC,eAAe,GAAG,CAAC,QAAD,EAAW,QAAX,CAAxB;AACA,QAAMC,MAAM,GAAG,CAAC,SAAD,EAAY,SAAZ,EAAuB,OAAvB,CAAf,CAZ0B,CAc1B;;AACA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBpC,QAAQ,CAAC,IAAD,CAAhC;AACA,QAAM,CAACqC,cAAD,EAAiBC,iBAAjB,IAAsCtC,QAAQ,CAAC,IAAD,CAApD;AACA,QAAM,CAACuC,SAAD,EAAYC,YAAZ,IAA4BxC,QAAQ,CAAC,IAAD,CAA1C;AACA,QAAM,CAACyC,KAAD,EAAQC,QAAR,IAAoB1C,QAAQ,CAAC,IAAD,CAAlC;AACA,QAAM,CAAC2C,WAAD,EAAcC,cAAd,IAAgC5C,QAAQ,CAAC,IAAD,CAA9C;AACA,QAAM,CAAC6C,QAAD,EAAWC,WAAX,IAA0B9C,QAAQ,CAAC,IAAD,CAAxC;AACA,QAAM,CAAC+C,SAAD,EAAYC,YAAZ,IAA4BhD,QAAQ,CAAC,IAAD,CAA1C;AACA,QAAM,CAACiD,WAAD,EAAcC,cAAd,IAAgClD,QAAQ,CAAC,EAAD,CAA9C,CAtB0B,CAwB1B;;AACA,QAAM,CAACmD,QAAD,EAAWC,WAAX,IAA0BpD,QAAQ,CAAC,IAAD,CAAxC;AACA,QAAM,CAACqD,QAAD,EAAWC,WAAX,IAA0BtD,QAAQ,CAAC,IAAD,CAAxC;AACA,QAAM,CAACuD,SAAD,EAAYC,YAAZ,IAA4BxD,QAAQ,CAAC,IAAD,CAA1C,CA3B0B,CA6B1B;;AACA,QAAM,CAACyD,eAAD,EAAkBC,kBAAlB,IAAwC1D,QAAQ,CAAC,KAAD,CAAtD;AACA,QAAM,CAAC2D,qBAAD,EAAwBC,wBAAxB,IAAoD5D,QAAQ,CAAC,IAAD,CAAlE;AAEA,QAAM,CAAC6D,mBAAD,EAAsBC,sBAAtB,IAAgD9D,QAAQ,CAAC,IAAD,CAA9D;AACA,QAAM,CAAC+D,gBAAD,EAAmBC,mBAAnB,IAA0ChE,QAAQ,CAAC,IAAD,CAAxD;;AAEA,QAAMiE,SAAS,GAAG,MAAM;AACtBC,IAAAA,OAAO,CAACC,GAAR,CAAYlB,WAAZ;AACA,QAAImB,YAAY,GAAG,CAAnB;;AACA,QAAGnB,WAAW,CAACoB,MAAZ,IAAsB,CAAzB,EAA2B;AAAEpB,MAAAA,WAAW,CAACqB,GAAZ,CAAiBC,IAAD,IAAU;AACrDH,QAAAA,YAAY,IAAIG,IAAI,CAACC,cAArB;AACD,OAF4B;AAE1B;;AACD,QAAGrC,IAAI,IAAI,IAAR,IAAgBI,SAAS,IAAI,IAA7B,IAAqCI,WAAW,IAAI,IAApD,IAA4DE,QAAQ,IAAI,IAAxE,IAAgFI,WAAW,IAAI,EAA/F,IAAqGF,SAAS,IAAI,IAAlH,IAA0HV,cAAc,IAAI,IAA5I,IAAoJI,KAAK,IAAI,IAAhK,EAAqK;AACjKpB,MAAAA,YAAY,CAAC,yBAAD,CAAZ;AACH,KAFD,MAEO,IAAG+C,YAAY,GAAG,CAAf,IAAoBA,YAAY,GAAG,CAAtC,EAAwC;AAC7C/C,MAAAA,YAAY,CAAC,yCAAD,CAAZ;AACD,KAFM,MAED;AACRS,MAAAA,mBAAmB,CAAC,IAAD,CAAnB;AACEZ,MAAAA,KAAK,CAACuD,IAAN,CAAWtD,QAAQ,GAAG,yBAAtB,EACA;AACQ,wBAAgBgB,IADxB;AAEQ,8BAAsBE,cAF9B;AAGQ,iBAASI,KAHjB;AAIQ,qBAAaF,SAJrB;AAKQ,uBAAeI,WALvB;AAMQ,qBAAaI,SANrB;AAOQ,4BAAoBF,QAP5B;AAQQ,uBAAeI;AARvB,OADA,EAWEyB,IAXF,CAWOC,GAAG,IAAI;AACVT,QAAAA,OAAO,CAACC,GAAR,CAAYQ,GAAG,CAACC,IAAJ,CAASC,OAArB;;AACA,YAAGF,GAAG,CAACC,IAAJ,CAASC,OAAT,IAAoB,SAAvB,EAAiC;AACjC3D,UAAAA,KAAK,CAAC4D,GAAN,CAAU3D,QAAQ,GAAG,yCAArB,EAAgEuD,IAAhE,CAAsEC,GAAD,IAAS;AAC1Ef,YAAAA,wBAAwB,CAACe,GAAG,CAACC,IAAJ,CAASG,OAAV,CAAxB;AACH,WAFD,EAEGL,IAFH,CAEQ,MAAI;AACRhB,YAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACA5B,YAAAA,mBAAmB,CAAC,KAAD,CAAnB;AACH,WALD;AAMD;AACF,OArBD,EAqBGkD,KArBH,CAqBUC,GAAD,IAAS;AAChBnD,QAAAA,mBAAmB,CAAC,KAAD,CAAnB;AACAT,QAAAA,YAAY,CAAC,gDAAD,CAAZ;AACD,OAxBD;AAyBH;AACA,GAtCD;;AAwCJ,sBACI;AAAA,4BACA,QAAC,GAAD;AACA,MAAA,KAAK,EAAE;AAAC6D,QAAAA,MAAM,EAAE,MAAT;AAAiBC,QAAAA,SAAS,EAAE,QAA5B;AAAsCC,QAAAA,aAAa,EAAC,MAApD;AAA4DC,QAAAA,UAAU,EAAC;AAAvE,OADP;AAAA,8BAGI,QAAC,GAAD;AAAK,QAAA,EAAE,EAAE;AAACC,UAAAA,IAAI,EAAC;AAAN,SAAT;AAAoB,QAAA,EAAE,EAAE;AAACA,UAAAA,IAAI,EAAC;AAAN,SAAxB;AAAA,+BACA,QAAC,IAAD;AACI,UAAA,QAAQ,EAAE;AAAEA,YAAAA,IAAI,EAAE;AAAR,WADd;AAEI,UAAA,UAAU,EAAE;AAAEA,YAAAA,IAAI,EAAE;AAAR,WAFhB;AAGI,UAAA,MAAM,EAAC,YAHX;AAII,UAAA,aAAa,EAAE;AAAEC,YAAAA,IAAI,EAAE5D;AAAR,WAJnB;AAKI,UAAA,cAAc,EAAE,MAAI,CAAE,CAL1B;AAMI,UAAA,IAAI,EAAEA,aANV;AAOI,UAAA,QAAQ,EAAG6D,MAAD,IAAU;AAChBtB,YAAAA,OAAO,CAACC,GAAR,CAAYqB,MAAZ;AACH,WATL;AAAA,kCAWJ,QAAC,IAAD,CAAM,IAAN;AAAW,YAAA,KAAK,EAAC,eAAjB;AAAiC,YAAA,KAAK,EAAE;AAACC,cAAAA,SAAS,EAAC;AAAX,aAAxC;AAAA,mCACE,QAAC,UAAD;AAAY,cAAA,KAAK,EAAE1B,gBAAnB;AAAqC,cAAA,QAAQ,EAAG2B,CAAD,IAAO;AAClD,oBAAGA,CAAH,EAAK;AACHxB,kBAAAA,OAAO,CAACC,GAAR,CAAYuB,CAAC,CAACC,EAAd;AACA3B,kBAAAA,mBAAmB,CAAC/D,MAAM,CAACyF,CAAC,CAACC,EAAH,CAAP,CAAnB;;AACA,sBAAIxD,IAAI,GAAGuD,CAAC,CAACC,EAAF,CAAKC,QAAL,EAAX;;AACA,sBAAIC,SAAS,GAAG1D,IAAI,CAAC2D,KAAL,CAAW,GAAX,CAAhB,CAJG,CAKH;;AACA,sBAAIC,gBAAgB,GAAI,GAAEF,SAAS,CAAC,CAAD,CAAI,IAAGA,SAAS,CAAC,CAAD,CAAI,IAAGA,SAAS,CAAC,CAAD,CAAI,IAAGA,SAAS,CAAC,CAAD,CAAI,EAAvF;AACAzD,kBAAAA,OAAO,CAAC2D,gBAAD,CAAP;AACD;AACJ;AAVD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,kBAXI,eAwBJ,QAAC,IAAD,CAAM,IAAN;AAAW,YAAA,KAAK,EAAC,iBAAjB;AAAA,mCACE,QAAC,MAAD;AAAQ,cAAA,YAAY,EAAE,QAAtB;AACA,cAAA,KAAK,EAAE1D,cADP;AAEA,cAAA,QAAQ,EAAG2D,KAAD,IAAW;AACnB9B,gBAAAA,OAAO,CAACC,GAAR,CAAY6B,KAAZ;AACA1D,gBAAAA,iBAAiB,CAAC0D,KAAD,CAAjB;AACD,eALD;AAAA,wBAOQ/D,eAAe,CAACqC,GAAhB,CAAqB2B,IAAD,IAAU;AAC5B,oCAAO,QAAC,MAAD,CAAQ,MAAR;AAAe,kBAAA,KAAK,EAAEA,IAAtB;AAAA,4BACEA;AADF;AAAA;AAAA;AAAA;AAAA,wBAAP;AAGD,eAJD;AAPR;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,kBAxBI,eAwCJ,QAAC,IAAD,CAAM,IAAN;AAAW,YAAA,KAAK,EAAC,OAAjB;AAAA,mCACE,QAAC,MAAD;AAAQ,cAAA,YAAY,EAAE,QAAtB;AACA,cAAA,KAAK,EAAExD,KADP;AAEA,cAAA,QAAQ,EAAGuD,KAAD,IAAW;AACnB9B,gBAAAA,OAAO,CAACC,GAAR,CAAY6B,KAAZ;AACAtD,gBAAAA,QAAQ,CAACsD,KAAD,CAAR;AACD,eALD;AAAA,wBAOQ9D,MAAM,CAACoC,GAAP,CAAY7B,KAAD,IAAW;AACpB,oCAAO,QAAC,MAAD,CAAQ,MAAR;AAAe,kBAAA,KAAK,EAAEA,KAAtB;AAAA,4BACEA;AADF;AAAA;AAAA;AAAA;AAAA,wBAAP;AAGD,eAJD;AAPR;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,kBAxCI,eAwDJ,QAAC,IAAD,CAAM,IAAN;AAAW,YAAA,KAAK,EAAC,SAAjB;AAAA,mCACE,QAAC,MAAD;AAAQ,cAAA,YAAY,EAAE,QAAtB;AACA,cAAA,KAAK,EAAEE,WADP;AAEA,cAAA,QAAQ,EAAGqD,KAAD,IAAW;AACnB9B,gBAAAA,OAAO,CAACC,GAAR,CAAY6B,KAAZ;AACApD,gBAAAA,cAAc,CAACoD,KAAD,CAAd;AACAxE,gBAAAA,KAAK,CAAC0E,QAAN,CAAe5B,GAAf,CAAoB6B,OAAD,IAAa;AAC5B,sBAAGA,OAAO,CAACxD,WAAR,IAAuBqD,KAA1B,EAAgC;AAC5BxD,oBAAAA,YAAY,CAAC2D,OAAO,CAACC,GAAT,CAAZ;AACAtC,oBAAAA,sBAAsB,CAACqC,OAAD,CAAtB;AACH;AACJ,iBALD;AAMD,eAXD;AAAA,wBAaQ3E,KAAK,CAAC0E,QAAN,CAAe5B,GAAf,CAAoB6B,OAAD,IAAa;AAC9B,oCAAO,QAAC,MAAD,CAAQ,MAAR;AAAe,kBAAA,KAAK,EAAEA,OAAO,CAACxD,WAA9B;AAAA,4BACEwD,OAAO,CAACxD;AADV;AAAA;AAAA;AAAA;AAAA,wBAAP;AAGD,eAJD;AAbR;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,kBAxDI,eA8EJ,QAAC,IAAD,CAAM,IAAN;AAAW,YAAA,KAAK,EAAC,OAAjB;AAAA,mCACA,QAAC,MAAD;AACA,cAAA,KAAK,EAAEI,SADP;AAEA,cAAA,QAAQ,EAAGiD,KAAD,IAAW;AACjBhD,gBAAAA,YAAY,CAACgD,KAAD,CAAZ;AACH,eAJD;AAAA,wBAOQnC,mBAAmB,IAAI,IAAvB,GAA8BA,mBAAmB,CAACwC,YAApB,CAAiC/B,GAAjC,CAAsCgC,KAAD,IAAW;AAC9E,oCAAO,QAAC,MAAD,CAAQ,MAAR;AAAe,kBAAA,KAAK,EAAEA,KAAK,CAACvD,SAA5B;AAAA,4BAAwCuD,KAAK,CAACvD;AAA9C;AAAA;AAAA;AAAA;AAAA,wBAAP;AACC,eAF6B,CAA9B,GAIA;AAXR;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,kBA9EI,eA8FJ,QAAC,IAAD,CAAM,IAAN;AAAW,YAAA,KAAK,EAAC,UAAjB;AAA4B,YAAA,KAAK,EAAE;AAAC0C,cAAAA,SAAS,EAAC;AAAX,aAAnC;AAAA,mCACE,QAAC,WAAD;AAAa,cAAA,KAAK,EAAE5C,QAApB;AAA8B,cAAA,QAAQ,EAAGmD,KAAD,IAAW;AAC/C,oBAAGA,KAAK,GAAG,CAAX,EAAa;AAAElD,kBAAAA,WAAW,CAACkD,KAAD,CAAX;AAAoB,iBAAnC,MACK;AACH3E,kBAAAA,YAAY,CAAC,sCAAD,CAAZ;AACH;AACF;AALD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,kBA9FI,eAsGJ,QAAC,IAAD,CAAM,IAAN;AAAW,YAAA,KAAK,EAAC,aAAjB;AAA+B,YAAA,KAAK,EAAE;AAACoE,cAAAA,SAAS,EAAC;AAAX,aAAtC;AAAA,oCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,eACuB;AAAA;AAAA;AAAA;AAAA,oBADvB,eAEE,QAAC,WAAD;AAAa,cAAA,KAAK,EAAElC,SAApB;AAA+B,cAAA,QAAQ,EAAGyC,KAAD,IAAW;AAChD,oBAAGA,KAAK,GAAG,CAAX,EAAa;AAAExC,kBAAAA,YAAY,CAACwC,KAAD,CAAZ;AAAqB;AACvC;AAFD;AAAA;AAAA;AAAA;AAAA,oBAFF,eAIO;AAAA;AAAA;AAAA;AAAA,oBAJP,eAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBALF,eAME,QAAC,MAAD;AACF,cAAA,KAAK,EAAE3C,QADL;AAEF,cAAA,QAAQ,EAAG2C,KAAD,IAAW;AACjB1C,gBAAAA,WAAW,CAAC0C,KAAD,CAAX;AACH,eAJC;AAAA,wBAOMnC,mBAAmB,IAAI,IAAvB,GAA8BA,mBAAmB,CAAC0C,SAApB,CAA8BjC,GAA9B,CAAmCjB,QAAD,IAAc;AAC9E,oCAAO,QAAC,MAAD,CAAQ,MAAR;AAAe,kBAAA,KAAK,EAAEA,QAAtB;AAAA,4BAAiCA;AAAjC;AAAA;AAAA;AAAA;AAAA,wBAAP;AACC,eAF6B,CAA9B,GAIA;AAXN;AAAA;AAAA;AAAA;AAAA,oBANF,eAoBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBApBF,eAsBE,QAAC,MAAD;AACF,cAAA,KAAK,EAAEF,QADL;AAEF,cAAA,QAAQ,EAAG6C,KAAD,IAAW;AACjB5C,gBAAAA,WAAW,CAAC4C,KAAD,CAAX;AACH,eAJC;AAAA,wBAOcnC,mBAAmB,IAAI,IAAvB,GAA8BA,mBAAmB,CAAC2C,SAApB,CAA8BlC,GAA9B,CAAmCnB,QAAD,IAAc;AAC1E,oBAAGA,QAAQ,CAACE,QAAT,IAAqBA,QAAxB,EAAiC;AACjC,sCAAO,QAAC,MAAD,CAAQ,MAAR;AAAe,oBAAA,KAAK,EAAEF,QAAQ,CAACA,QAA/B;AAAA,8BAA0CA,QAAQ,CAACA;AAAnD;AAAA;AAAA;AAAA;AAAA,0BAAP;AACC;AACF,eAJ2B,CAA9B,GAME;AAbhB;AAAA;AAAA;AAAA;AAAA,oBAtBF,eAsCE,QAAC,MAAD;AACA,cAAA,KAAK,EAAE;AAACsD,gBAAAA,SAAS,EAAC;AAAX,eADP;AAEA,cAAA,OAAO,EAAE,MAAM;AACb,oBAAGlD,SAAS,IAAI,IAAb,IAAqBF,QAAQ,IAAI,IAAjC,IAAyCF,QAAQ,IAAI,IAAxD,EAA6D;AAC3D9B,kBAAAA,YAAY,CAAC,+CAAD,CAAZ;AACD,iBAFD,MAEO;AACL,wBAAMqF,eAAe,GAAG;AAAClC,oBAAAA,cAAc,EAAEjB,SAAjB;AAA4BF,oBAAAA,QAAQ,EAAEA,QAAtC;AAAgDF,oBAAAA,QAAQ,EAAEA;AAA1D,mBAAxB;AACAF,kBAAAA,WAAW,CAAC0D,IAAZ,CAAiBD,eAAjB;AACAlD,kBAAAA,YAAY,CAAC,IAAD,CAAZ;AACAF,kBAAAA,WAAW,CAAC,IAAD,CAAX;AACAF,kBAAAA,WAAW,CAAC,IAAD,CAAX;AACD;AACF,eAZD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAtCF,eAoDE;AAAM,cAAA,KAAK,EAAE;AAAEwD,gBAAAA,UAAU,EAAE;AAAd,eAAb;AAAA,sCACA;AAAM,gBAAA,KAAK,EAAE;AAACC,kBAAAA,YAAY,EAAC,KAAd;AAAqBC,kBAAAA,OAAO,EAAE,OAA9B;AAAuCF,kBAAAA,UAAU,EAAC,MAAlD;AAA0DG,kBAAAA,KAAK,EAAE,QAAjE;AAA2EC,kBAAAA,eAAe,EAAE;AAA5F,iBAAb;AAAA,wCACI;AAAM,kBAAA,KAAK,EAAE;AAACD,oBAAAA,KAAK,EAAC;AAAP,mBAAb;AAAA,4BAAgC9D,WAAW,CAACoB;AAA5C;AAAA;AAAA;AAAA;AAAA,wBADJ;AAAA;AAAA;AAAA;AAAA;AAAA,sBADA,eAIA,QAAC,MAAD;AACA,gBAAA,KAAK,EAAE;AAACoC,kBAAAA,SAAS,EAAC,KAAX;AAAkBG,kBAAAA,UAAU,EAAE,KAA9B;AAAqCK,kBAAAA,MAAM,EAAE;AAA7C,iBADP;AAEA,gBAAA,OAAO,EAAE,MAAM;AACb/D,kBAAAA,cAAc,CAAC,EAAD,CAAd;AACD,iBAJD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAJA;AAAA;AAAA;AAAA;AAAA;AAAA,oBApDF;AAAA;AAAA;AAAA;AAAA;AAAA,kBAtGI;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,cAHJ,eA8KF,QAAC,GAAD;AAAK,QAAA,EAAE,EAAE;AAACoC,UAAAA,IAAI,EAAC;AAAN,SAAT;AAAoB,QAAA,EAAE,EAAE;AAACA,UAAAA,IAAI,EAAC;AAAN,SAAxB;AAAA,gCACI,QAAC,MAAD;AAAQ,UAAA,KAAK,EAAE,EAAf;AAAmB,UAAA,IAAI,EAAC,SAAxB;AAAkC,UAAA,OAAO,EAAErB,SAA3C;AAAA,oBAAwDpC,gBAAgB,gBAAE,QAAC,eAAD;AAAA;AAAA;AAAA;AAAA,kBAAF,GAAqB;AAA7F;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI,QAAC,MAAD;AAAQ,UAAA,KAAK,EAAE,EAAf;AAAmB,UAAA,OAAO,EAAE,MAAI;AAC3B6B,YAAAA,kBAAkB,CAAC,KAAD,CAAlB;AAEAM,YAAAA,mBAAmB,CAAC,IAAD,CAAnB;AACAtB,YAAAA,QAAQ,CAAC,IAAD,CAAR;AACAI,YAAAA,WAAW,CAAC,IAAD,CAAX;AACAI,YAAAA,cAAc,CAAC,EAAD,CAAd;AACAN,YAAAA,cAAc,CAAC,IAAD,CAAd;AACAJ,YAAAA,YAAY,CAAC,IAAD,CAAZ;AACAQ,YAAAA,YAAY,CAAC,IAAD,CAAZ;AACAV,YAAAA,iBAAiB,CAAC,IAAD,CAAjB;AACJ,WAXD;AAWG,UAAA,IAAI,EAAC,MAXR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,cA9KE;AAAA;AAAA;AAAA;AAAA;AAAA,YADA,eAgMA,QAAC,KAAD;AAAO,MAAA,KAAK,EAAC,cAAb;AAA4B,MAAA,OAAO,EAAEmB,eAArC;AACA,MAAA,MAAM,EAAE,cACJ,QAAC,MAAD;AAAmB,QAAA,IAAI,EAAC,OAAxB;AAAgC,QAAA,OAAO,EAAE,MAAM;AAC7CzB,UAAAA,mBAAmB,CAAC,IAAD,CAAnB;AACAkC,UAAAA,OAAO,CAACC,GAAR,CAAYR,qBAAZ,EAF6C,CAG3C;;AACAzC,UAAAA,KAAK,CAACuD,IAAN,CAAWtD,QAAQ,GAAG,qCAAX,GAAmDwC,qBAAqB,CAAC,CAAD,CAArB,CAAyByC,GAAvF,EAA4FzC,qBAAqB,CAAC,CAAD,CAAjH,EAAsHe,IAAtH,CAA4HC,GAAD,IAAO,CAC9H;AACA;AACA;AACH,WAJD,EAIGD,IAJH,CAIQ,MAAI;AACVhB,YAAAA,kBAAkB,CAAC,KAAD,CAAlB;AACA1B,YAAAA,mBAAmB,CAAC,KAAD,CAAnB;AACD,WAPD,EAOGgD,KAPH,CAOSC,GAAG,IAAI;AACd5D,YAAAA,YAAY,CAAC,oBAAD,CAAZ;AACAW,YAAAA,mBAAmB,CAAC,KAAD,CAAnB;AACD,WAVD;AAWH,SAfD;AAAA,kBAeID,gBAAgB,gBAAG,QAAC,eAAD;AAAA;AAAA;AAAA;AAAA,gBAAH,GAAwB;AAf5C,SAAY,MAAZ;AAAA;AAAA;AAAA;AAAA,cADI,eAkBJ,QAAC,MAAD;AAAqB,QAAA,IAAI,EAAC,SAA1B;AAAoC,QAAA,OAAO,EAAE,MAAI;AAC7CX,UAAAA,YAAY,CAAC,aAAD,CAAZ;AACAsC,UAAAA,kBAAkB,CAAC,KAAD,CAAlB;AAEAM,UAAAA,mBAAmB,CAAC,IAAD,CAAnB;AACAtB,UAAAA,QAAQ,CAAC,IAAD,CAAR;AACAI,UAAAA,WAAW,CAAC,IAAD,CAAX;AACAI,UAAAA,cAAc,CAAC,EAAD,CAAd;AACAN,UAAAA,cAAc,CAAC,IAAD,CAAd;AACAJ,UAAAA,YAAY,CAAC,IAAD,CAAZ;AACAQ,UAAAA,YAAY,CAAC,IAAD,CAAZ;AACAV,UAAAA,iBAAiB,CAAC,IAAD,CAAjB;AACC,SAZL;AAAA;AAAA,SAAY,QAAZ;AAAA;AAAA;AAAA;AAAA,cAlBI,CAiCJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAzCI,OADR;AA2CM,MAAA,QAAQ,EAAE,MAAM,CAAE,CA3CxB;AAAA,yEA6CI;AAAA;AAAA;AAAA;AAAA,cA7CJ,eA8CI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cA9CJ,eA+CI;AAAA;AAAA;AAAA;AAAA,cA/CJ,eAgDI;AAAA;AAAA;AAAA;AAAA,cAhDJ,eAiDI;AAAA,kBAEAqB,qBAAqB,GAAEuD,MAAM,CAACC,IAAP,CAAYxD,qBAAqB,CAAC,CAAD,CAAjC,EAAsCW,GAAtC,CAA2C8C,GAAD,IAAS;AACtE,cAAGA,GAAG,IAAI,KAAP,IAAgBA,GAAG,IAAI,WAAvB,IAAsCA,GAAG,IAAI,KAAhD,EAAuD;AAClD,gCAAO;AAAA,yBAAKA,GAAL,SAAaC,IAAI,CAACC,SAAL,CAAe3D,qBAAqB,CAAC,CAAD,CAArB,CAAyByD,GAAzB,CAAf,CAAb;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAP;AACJ,WAFD,MAEO;AACH,mBAAO,EAAP;AACH;AACJ,SANsB,CAAF,GAQrB;AAVA;AAAA;AAAA;AAAA;AAAA,cAjDJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAhMA;AAAA,kBADJ;AAkQH;;GA9UQ7F,iB;;KAAAA,iB;AAgVT,eAAeA,iBAAf","sourcesContent":["import React, { useState } from 'react';\r\nimport moment from 'moment';\r\nimport { PdfMakeWrapper } from 'pdfmake-wrapper'; \r\nimport * as pdfFonts from \"pdfmake/build/vfs_fonts\";\r\n\r\nimport {\r\n    Row,\r\n    Col,\r\n    Form,\r\n    Input,\r\n    Button,\r\n    Radio,\r\n    Select,\r\n    Cascader,\r\n    DatePicker,\r\n    InputNumber, \r\n    TreeSelect,\r\n    Switch,\r\n    Modal\r\n  } from 'antd';\r\nimport TextArea from 'antd/lib/input/TextArea';\r\nimport axios from 'axios';\r\nimport { API_BASE } from '../../apiBaseInfo';\r\nimport { successToast, failureToast } from '../../App';\r\nimport {LoadingOutlined} from '@ant-design/icons';\r\n\r\nfunction GrindingEntryForm(props) { \r\n        PdfMakeWrapper.setFonts(pdfFonts);\r\n        const pdfEntryErrorReport = new PdfMakeWrapper();\r\n\r\n        const [componentSize, setComponentSize] = useState('small');\r\n\r\n        const [submitFormLoader, setSubmitFormLoader] = useState(false);\r\n        const [deleteByIdLoader, setDeleteByIdLoader] = useState(false);\r\n\r\n        // composition: [{inputPartRatio: Number, supplier: String, rockType: String}],\r\n\r\n        const productionUnits = ['Unit 1', 'Unit 2']\r\n        const shifts = ['Morning', 'Evening', 'Night']\r\n\r\n        //form payload\r\n        const [date, setDate] = useState(null);\r\n        const [productionUnit, setProductionUnit] = useState(null);\r\n        const [mineralId, setMineralId] = useState(null);\r\n        const [shift, setShift] = useState(null);\r\n        const [mineralName, setMineralName] = useState(null);\r\n        const [quantity, setQuantity] = useState(null);\r\n        const [gradeName, setGradeName] = useState(null);\r\n        const [composition, setComposition] = useState([]);\r\n\r\n        //for composition\r\n        const [rockType, setRockType] = useState(null);\r\n        const [supplier, setSupplier] = useState(null);\r\n        const [partRatio, setPartRatio] = useState(null);\r\n\r\n        // affirmation after saving into the DB\r\n        const [showAffirmation, setShowAffermation] = useState(false);\r\n        const [dataAffirmationFromDB, setDataAffirmationFromDB] = useState(null);\r\n\r\n        const [mineralForComponent, setMineralForComponent] = useState(null);\r\n        const [dateForComponent, setDateForComponent] = useState(null);\r\n\r\n        const sendEntry = () => { \r\n          console.log(composition);\r\n          var partRatioSum = 0;\r\n          if(composition.length != 0){ composition.map((part) => {\r\n            partRatioSum += part.inputPartRatio;\r\n          })}\r\n            if(date == null || mineralId == null || mineralName == null || quantity == null || composition == [] || gradeName == null || productionUnit == null || shift == null){\r\n                failureToast(\"All fields are required\");\r\n            } else if(partRatioSum < 1 || partRatioSum > 1){\r\n              failureToast(\"Sum of constituent partRatios must be 1\");\r\n            }else {\r\n          setSubmitFormLoader(true);\r\n            axios.post(API_BASE + \"/api/grindingEntryModel\",\r\n            {\r\n                    \"grindingDate\": date,\r\n                    \"productionUnitUsed\": productionUnit, \r\n                    \"shift\": shift,  \r\n                    \"mineralId\": mineralId,\r\n                    \"mineralName\": mineralName,\r\n                    \"gradeName\": gradeName,  \r\n                    \"quantityProduced\": quantity, \r\n                    \"composition\": composition\r\n            }\r\n            ).then(res => {\r\n                console.log(res.data.message);\r\n                if(res.data.message == \"success\"){\r\n                axios.get(API_BASE + '/api/grindingEntryModel/getLastInserted').then((res) => {\r\n                    setDataAffirmationFromDB(res.data.content);\r\n                }).then(()=>{\r\n                    setShowAffermation(true);\r\n                    setSubmitFormLoader(false);\r\n                })\r\n              }\r\n            }).catch((err) => {\r\n              setSubmitFormLoader(false);\r\n              failureToast('Something went wrong while submitting the form');\r\n            })\r\n        }\r\n        }\r\n\r\n    return (\r\n        <>\r\n        <Row \r\n        style={{height: '75vh', overflowY: 'scroll', paddingBottom:'20px', paddingTop:'20px'}}\r\n        >\r\n            <Col xs={{span:24}} md={{span:20}}>\r\n            <Form\r\n                labelCol={{ span: 8 }}\r\n                wrapperCol={{ span: 12 }}\r\n                layout=\"horizontal\"\r\n                initialValues={{ size: componentSize }}\r\n                onValuesChange={()=>{}}\r\n                size={componentSize}\r\n                onFinish={(values)=>{\r\n                    console.log(values);\r\n                }}\r\n      > \r\n        <Form.Item label=\"Grinding Date\" style={{textAlign:'left'}}>\r\n          <DatePicker value={dateForComponent} onChange={(e) => {\r\n              if(e){\r\n                console.log(e._d);\r\n                setDateForComponent(moment(e._d));\r\n                var date = e._d.toString();\r\n                var dateArray = date.split(\" \");\r\n                // customDateString Day/Month/DateOFMonth/Year/\r\n                var customDateString = `${dateArray[0]}/${dateArray[1]}/${dateArray[2]}/${dateArray[3]}`;\r\n                setDate(customDateString);\r\n              }\r\n          }} />\r\n        </Form.Item>\r\n        <Form.Item label=\"Production Unit\">\r\n          <Select defaultValue={\"Select\"}\r\n          value={productionUnit}\r\n          onChange={(value) => {\r\n            console.log(value);\r\n            setProductionUnit(value); \r\n          }}>\r\n              {\r\n                  productionUnits.map((unit) => {\r\n                    return <Select.Option value={unit}>\r\n                            {unit}\r\n                        </Select.Option>\r\n                  })\r\n              } \r\n          </Select>\r\n        </Form.Item>\r\n        <Form.Item label=\"Shift\">\r\n          <Select defaultValue={\"Select\"}\r\n          value={shift}\r\n          onChange={(value) => {\r\n            console.log(value);\r\n            setShift(value); \r\n          }}>\r\n              {\r\n                  shifts.map((shift) => {\r\n                    return <Select.Option value={shift}>\r\n                            {shift}\r\n                        </Select.Option>\r\n                  })\r\n              } \r\n          </Select>\r\n        </Form.Item>\r\n        <Form.Item label=\"Mineral\">\r\n          <Select defaultValue={\"Select\"}\r\n          value={mineralName}\r\n          onChange={(value) => {\r\n            console.log(value);\r\n            setMineralName(value);\r\n            props.minerals.map((mineral) => {\r\n                if(mineral.mineralName == value){\r\n                    setMineralId(mineral._id);\r\n                    setMineralForComponent(mineral);\r\n                }\r\n            })\r\n          }}>\r\n              {\r\n                  props.minerals.map((mineral) => {\r\n                    return <Select.Option value={mineral.mineralName}>\r\n                            {mineral.mineralName}\r\n                        </Select.Option>\r\n                  })\r\n              } \r\n          </Select>\r\n        </Form.Item>\r\n        <Form.Item label=\"Grade\">\r\n        <Select\r\n        value={gradeName}\r\n        onChange={(value) => {\r\n            setGradeName(value);\r\n        }}\r\n        >\r\n              { \r\n                mineralForComponent != null ? mineralForComponent.powderGrades.map((grade) => {\r\n                return <Select.Option value={grade.gradeName}>{grade.gradeName}</Select.Option>\r\n                }) \r\n                :\r\n                \"\"\r\n              } \r\n          </Select>\r\n        </Form.Item>\r\n        <Form.Item label=\"Quantity\" style={{textAlign:\"left\"}}>\r\n          <InputNumber value={quantity} onChange={(value) => {\r\n              if(value > 0){ setQuantity(value) }\r\n              else {  \r\n                failureToast(\"'Quantity' must be a positive number\");\r\n            }\r\n          }} />\r\n        </Form.Item>\r\n        <Form.Item label=\"Composition\" style={{textAlign:\"left\"}}>\r\n          <sub>Part Ratio</sub><br/>\r\n          <InputNumber value={partRatio} onChange={(value) => {\r\n              if(value > 0){ setPartRatio(value) } \r\n          }} /><br/>\r\n          <sub>Supplier</sub>\r\n          <Select \r\n        value={supplier}\r\n        onChange={(value) => {\r\n            setSupplier(value);\r\n        }}\r\n        >\r\n              { \r\n                mineralForComponent != null ? mineralForComponent.suppliers.map((supplier) => {\r\n                return <Select.Option value={supplier}>{supplier}</Select.Option>\r\n                }) \r\n                :\r\n                \"\"\r\n              } \r\n          </Select>\r\n          <sub>Rock type</sub>\r\n\r\n          <Select\r\n        value={rockType}\r\n        onChange={(value) => {\r\n            setRockType(value);\r\n        }}\r\n        >\r\n              { \r\n                        mineralForComponent != null ? mineralForComponent.rockTypes.map((rockType) => {\r\n                            if(rockType.supplier == supplier){\r\n                            return <Select.Option value={rockType.rockType}>{rockType.rockType}</Select.Option>\r\n                            }\r\n                          })\r\n                          :\r\n                          \"\"\r\n              } \r\n          </Select>\r\n          <Button\r\n          style={{marginTop:'5px'}}\r\n          onClick={() => {\r\n            if(partRatio == null || supplier == null || rockType == null){\r\n              failureToast(\"Empty fields in 'Composition' are not allowed\");\r\n            } else {\r\n              const compositionPart = {inputPartRatio: partRatio, supplier: supplier, rockType: rockType};\r\n              composition.push(compositionPart);\r\n              setPartRatio(null);\r\n              setSupplier(null);\r\n              setRockType(null);\r\n            }\r\n          }}\r\n          >Add</Button>\r\n          <span style={{ marginLeft: '20px'}}>\r\n          <span style={{borderRadius:'2px', padding: '3.5px', marginLeft:'15px', color: 'yellow', backgroundColor: '#1890ff'}}>\r\n              <span style={{color:'yellow'}}>{composition.length}</span> constituents\r\n          </span>\r\n          <Button\r\n          style={{marginTop:'2px', marginLeft: '3px', border: '1px solid #1890ff'}}\r\n          onClick={() => {\r\n            setComposition([]);\r\n          }}\r\n          >Reset constituents</Button>\r\n          </span>\r\n        </Form.Item>\r\n \r\n         \r\n      </Form>\r\n      </Col>\r\n      <Col xs={{span:24}} md={{span:24}}>\r\n          <Button style={{}} type=\"primary\" onClick={sendEntry}>{ submitFormLoader? <LoadingOutlined/>:\"Save\"}</Button>  \r\n          <Button style={{}} onClick={()=>{\r\n               setShowAffermation(false); \r\n\r\n               setDateForComponent(null);\r\n               setShift(null);\r\n               setQuantity(null);\r\n               setComposition([]); \r\n               setMineralName(null);\r\n               setMineralId(null); \r\n               setGradeName(null);\r\n               setProductionUnit(null);\r\n          }} type=\"link\">Reset</Button>\r\n      </Col>\r\n        </Row>\r\n\r\n        <Modal title=\"Confirmation\" visible={showAffirmation} \r\n        footer={[\r\n            <Button key=\"back\" type=\"ghost\" onClick={() => {\r\n              setDeleteByIdLoader(true);\r\n              console.log(dataAffirmationFromDB);\r\n                //delete the record from database and resubmit\r\n                axios.post(API_BASE + \"/api/grindingEntryModel/deleteById/\" + dataAffirmationFromDB[0]._id, dataAffirmationFromDB[0]).then((res)=>{\r\n                    // failureToast(res.data.message + \"deleted\");\r\n                    // pdfEntryErrorReport.add(JSON.stringify(dataAffirmationFromDB));\r\n                    // pdfEntryErrorReport.create().download();\r\n                }).then(()=>{\r\n                  setShowAffermation(false);\r\n                  setDeleteByIdLoader(false);\r\n                }).catch(err => {\r\n                  failureToast(\"Error! Not deleted\");\r\n                  setDeleteByIdLoader(false);\r\n                })\r\n            }}>{deleteByIdLoader ? <LoadingOutlined/> : \"Edit\" }\r\n            </Button>,\r\n            <Button key=\"submit\" type=\"primary\" onClick={()=>{\r\n                successToast(\"Entry Saved\");\r\n                setShowAffermation(false);\r\n                \r\n                setDateForComponent(null);\r\n                setShift(null);\r\n                setQuantity(null);\r\n                setComposition([]); \r\n                setMineralName(null);\r\n                setMineralId(null); \r\n                setGradeName(null);\r\n                setProductionUnit(null);\r\n                }}>\r\n              Done\r\n            </Button>,\r\n            // <Button\r\n            //   key=\"link\"\r\n            //   href=\"https://google.com\"\r\n            //   type=\"primary\"\r\n            //   loading={loading}\r\n            //   onClick={this.handleOk}\r\n            // >\r\n            //   Search on Google\r\n            // </Button>,\r\n          ]}  onCancel={() => {}}> \r\n            Please re-examin the submitted document\r\n            <br/>\r\n            <sub> Click on \"Submit\" to save or click on \"Edit\" to make changes  </sub>\r\n            <br/>\r\n            <hr/>\r\n            <ul>\r\n            {\r\n            dataAffirmationFromDB? Object.keys(dataAffirmationFromDB[0]).map((key) => {\r\n                if(key != \"_id\" && key != \"timeStamp\" && key != \"__v\") {\r\n                     return <li>{key} : {JSON.stringify(dataAffirmationFromDB[0][key])}</li>\r\n                } else {\r\n                    return \"\";\r\n                }\r\n            })\r\n            :\r\n            \"\"\r\n            }\r\n            </ul>\r\n        </Modal>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default GrindingEntryForm;"]},"metadata":{},"sourceType":"module"}