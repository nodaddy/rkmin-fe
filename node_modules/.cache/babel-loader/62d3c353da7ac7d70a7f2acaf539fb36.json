{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { DocumentDefinition } from './document-definition';\nimport pdfMake from 'pdfmake/build/pdfmake';\n/**\n * Main class that contains the essencial for build the PDF\n */\n\nvar PdfMakeWrapper = function (_super) {\n  __extends(PdfMakeWrapper, _super);\n\n  function PdfMakeWrapper() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\n   * Sets custom fonts. This changes the global font types\n   * @param fonts {{ [propName: string]: string }} The generated fonts object\n   * @param fontTypesConfig {{ [propName: string]: IFontTypes }} The font type configuration\n   *\n   * @example\n   * import { PdfMakeWrapper } from 'pdfmake-wrapper';\n   * import customFonts 'path/to/custom/fonts';\n   *\n   * PdfMakeWrapper.setFonts(\n   *  customFonts,\n   *  {\n   *      customFonts: { // The property name can be any\n   *          normal: 'custom-fonts.ttf',\n   *          bold: 'custom-fonts-bold.ttf',\n   *          italics: 'custom-fonts-italics.ttf',\n   *          bolditalics: 'custom-fonts-bolditalics.ttf'\n   *      },\n   *      ...\n   *  }\n   * );\n   */\n\n\n  PdfMakeWrapper.setFonts = function (fonts, fontTypesConfig) {\n    pdfMake.vfs = fonts.pdfMake.vfs;\n\n    if (fontTypesConfig) {\n      pdfMake.fonts = fontTypesConfig;\n    }\n  };\n  /**\n   * Create the PDF\n   */\n\n\n  PdfMakeWrapper.prototype.create = function () {\n    return pdfMake.createPdf(this.getDefinition());\n  }; // ======================== HELPERS =========================\n\n  /**\n   * It returns new lines\n   * @param num numbers of newline\n   * @deprecated This will be deprecated in next minor version\n   */\n\n\n  PdfMakeWrapper.prototype.ln = function (num) {\n    if (num === void 0) {\n      num = 1;\n    }\n\n    if (num < 1) num = 1;\n    return '\\n'.repeat(num);\n  };\n\n  return PdfMakeWrapper;\n}(DocumentDefinition);\n\nexport { PdfMakeWrapper };","map":{"version":3,"sources":["../../src/lib/pdfmake-wrapper.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AACA,SAAS,kBAAT,QAAmC,uBAAnC;AACA,OAAO,OAAP,MAAoB,uBAApB;AAEA;;AAEG;;AACH,IAAA,cAAA,GAAA,UAAA,MAAA,EAAA;AAAoC,EAAA,SAAA,CAAA,cAAA,EAAA,MAAA,CAAA;;AAApC,WAAA,cAAA,GAAA;;AAmDC;AAjDG;;;;;;;;;;;;;;;;;;;;;AAqBG;;;AACW,EAAA,cAAA,CAAA,QAAA,GAAd,UAAuB,KAAvB,EAAsC,eAAtC,EAA8E;AAC1E,IAAA,OAAO,CAAC,GAAR,GAAc,KAAK,CAAC,OAAN,CAAc,GAA5B;;AAEA,QAAI,eAAJ,EAAqB;AACjB,MAAA,OAAO,CAAC,KAAR,GAAgB,eAAhB;AACH;AACJ,GANa;AAQd;;AAEG;;;AACI,EAAA,cAAA,CAAA,SAAA,CAAA,MAAA,GAAP,YAAA;AACI,WAAO,OAAO,CAAC,SAAR,CAAkB,KAAK,aAAL,EAAlB,CAAP;AACH,GAFM,CAnCX,CAuCI;;AAEA;;;;AAIG;;;AACI,EAAA,cAAA,CAAA,SAAA,CAAA,EAAA,GAAP,UAAU,GAAV,EAAyB;AAAf,QAAA,GAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,GAAA,GAAA,CAAA;AAAe;;AACrB,QAAI,GAAG,GAAG,CAAV,EAAa,GAAG,GAAG,CAAN;AAEb,WAAO,KAAK,MAAL,CAAa,GAAb,CAAP;AACH,GAJM;;AAKX,SAAA,cAAA;AAAC,CAnDD,CAAoC,kBAApC,CAAA","sourceRoot":"","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { DocumentDefinition } from './document-definition';\nimport pdfMake from 'pdfmake/build/pdfmake';\n/**\n * Main class that contains the essencial for build the PDF\n */\nvar PdfMakeWrapper = /** @class */ (function (_super) {\n    __extends(PdfMakeWrapper, _super);\n    function PdfMakeWrapper() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * Sets custom fonts. This changes the global font types\n     * @param fonts {{ [propName: string]: string }} The generated fonts object\n     * @param fontTypesConfig {{ [propName: string]: IFontTypes }} The font type configuration\n     *\n     * @example\n     * import { PdfMakeWrapper } from 'pdfmake-wrapper';\n     * import customFonts 'path/to/custom/fonts';\n     *\n     * PdfMakeWrapper.setFonts(\n     *  customFonts,\n     *  {\n     *      customFonts: { // The property name can be any\n     *          normal: 'custom-fonts.ttf',\n     *          bold: 'custom-fonts-bold.ttf',\n     *          italics: 'custom-fonts-italics.ttf',\n     *          bolditalics: 'custom-fonts-bolditalics.ttf'\n     *      },\n     *      ...\n     *  }\n     * );\n     */\n    PdfMakeWrapper.setFonts = function (fonts, fontTypesConfig) {\n        pdfMake.vfs = fonts.pdfMake.vfs;\n        if (fontTypesConfig) {\n            pdfMake.fonts = fontTypesConfig;\n        }\n    };\n    /**\n     * Create the PDF\n     */\n    PdfMakeWrapper.prototype.create = function () {\n        return pdfMake.createPdf(this.getDefinition());\n    };\n    // ======================== HELPERS =========================\n    /**\n     * It returns new lines\n     * @param num numbers of newline\n     * @deprecated This will be deprecated in next minor version\n     */\n    PdfMakeWrapper.prototype.ln = function (num) {\n        if (num === void 0) { num = 1; }\n        if (num < 1)\n            num = 1;\n        return '\\n'.repeat(num);\n    };\n    return PdfMakeWrapper;\n}(DocumentDefinition));\nexport { PdfMakeWrapper };\n//# sourceMappingURL=pdfmake-wrapper.js.map"]},"metadata":{},"sourceType":"module"}